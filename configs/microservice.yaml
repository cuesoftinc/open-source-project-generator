# Microservice Configuration
# This example generates a standalone Go microservice with Docker and Kubernetes support

name: "user-service"
description: "User management microservice"
output_dir: "./user-service"

# Components to generate
components:
  # Go Microservice
  - type: go-backend
    name: user-service
    enabled: true
    config:
      module: github.com/myorg/user-service
      framework: gin
      port: 8081
      cors_enabled: true
      auth_enabled: true
      database: postgres     # PostgreSQL database
      cache: redis           # Redis cache

  # Docker Configuration
  - type: docker
    name: docker-config
    enabled: true
    config:
      compose_version: "3.8"
      include_dev: true
      include_prod: true
      multi_stage: true      # Multi-stage builds

  # Kubernetes Configuration
  - type: kubernetes
    name: k8s-config
    enabled: true
    config:
      namespace: services
      replicas: 3
      resources:
        cpu_request: "100m"
        cpu_limit: "500m"
        memory_request: "128Mi"
        memory_limit: "512Mi"
      health_checks: true
      ingress: true

# Integration settings
integration:
  generate_docker_compose: true
  generate_scripts: true
  
  # Service endpoints
  api_endpoints:
    service: http://localhost:8081
    database: postgres://localhost:5432/userdb
    cache: redis://localhost:6379
  
  # Environment configuration
  environment:
    SERVICE_NAME: user-service
    SERVICE_PORT: "8081"
    DB_HOST: postgres
    DB_PORT: "5432"
    DB_NAME: userdb
    REDIS_HOST: redis
    REDIS_PORT: "6379"
    LOG_LEVEL: info

# Generation options
options:
  use_external_tools: true
  dry_run: false
  verbose: false
  create_backup: true
  update_versions: true
