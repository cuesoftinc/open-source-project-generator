# Backend-Only Project Configuration
# Example configuration for a standalone Go backend API
#
# This configuration generates a Go backend API without frontend or mobile components.
# Ideal for:
# - Microservices
# - REST APIs
# - GraphQL servers
# - Backend services for existing frontends
# - API-first development
#
# Usage:
#   project-generator generate --config configs/backend-only.yaml

# Project metadata
name: backend-api
description: A standalone Go backend API service
output_dir: ./backend-api

# Component definitions
components:
  # Frontend - Disabled for backend-only project
  - type: nextjs
    name: web-app
    enabled: false
    config:
      name: web-app
      typescript: true
      tailwind: true
      app_router: true
      eslint: true

  # Backend - Go API server with Gin framework
  - type: go-backend
    name: api-server
    enabled: true
    config:
      name: api-server
      module: github.com/example/backend-api  # Go module path
      framework: gin                          # Web framework
      port: 8080                              # Server port

  # Mobile - Disabled for backend-only project
  - type: android
    name: mobile-android
    enabled: false
    config:
      name: mobile-android
      package: com.example.backendapi
      min_sdk: 24
      target_sdk: 34
      language: kotlin

  # Mobile - Disabled for backend-only project
  - type: ios
    name: mobile-ios
    enabled: false
    config:
      name: mobile-ios
      bundle_id: com.example.backendapi
      deployment_target: "15.0"
      language: swift

# Integration configuration
integration:
  # Generate Docker Compose for backend services (database, cache, etc.)
  generate_docker_compose: true
  
  # Generate build and deployment scripts
  generate_scripts: true
  
  # API configuration
  api_endpoints:
    backend: http://localhost:8080
  
  # Backend environment variables
  shared_environment:
    # Server configuration
    PORT: "8080"
    HOST: "0.0.0.0"
    ENV: development
    
    # Logging
    LOG_LEVEL: info
    LOG_FORMAT: json
    
    # CORS configuration
    CORS_ORIGINS: "*"
    CORS_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
    CORS_HEADERS: "Content-Type,Authorization"
    
    # Database configuration (examples)
    DB_HOST: localhost
    DB_PORT: "5432"
    DB_NAME: backend_api
    DB_USER: postgres
    DB_PASSWORD: postgres
    DB_SSL_MODE: disable
    
    # Redis configuration (examples)
    REDIS_HOST: localhost
    REDIS_PORT: "6379"
    REDIS_DB: "0"
    
    # API configuration
    API_TIMEOUT: "30"
    API_RATE_LIMIT: "100"
    
    # Security
    JWT_SECRET: change-this-in-production
    JWT_EXPIRY: "24h"

# Generation options
options:
  # Use go mod init and go get for dependency management
  use_external_tools: true
  
  # Preview mode
  dry_run: false
  
  # Verbose output for debugging
  verbose: false
  
  # Backup existing files
  create_backup: true
  
  # Prompt before overwriting
  force_overwrite: false
