# Development Dockerfile for Open Source Project Generator
#
# This Dockerfile provides a complete development environment with:
# - Go 1.25+ toolchain
# - Development tools (air, gotestsum)
# - Security scanning tools (gosec, govulncheck, staticcheck, golangci-lint)
# - Build tools (make, git)
#
# Usage:
#   docker build -f Dockerfile.dev -t generator-dev .
#   docker run -it --rm -v $(pwd):/app -v go-mod-cache:/home/developer/go/pkg/mod generator-dev
#
# Recommended volumes:
#   -v $(pwd):/app                                    # Mount source code
#   -v go-mod-cache:/home/developer/go/pkg/mod        # Persist Go module cache
#   -v go-build-cache:/home/developer/.cache/go-build # Persist build cache
#   -v generator-config:/home/developer/.config/generator # Persist generator config
#   -v generator-cache:/home/developer/.cache/generator   # Persist generator cache

FROM golang:1.25-alpine

# Build arguments for platform detection
ARG TARGETARCH
ARG TARGETOS

# Install system dependencies
RUN apk add --no-cache \
    git \
    ca-certificates \
    tzdata \
    make \
    bash \
    bash-completion \
    curl \
    wget \
    tar \
    gzip \
    openssh-client \
    && rm -rf /var/cache/apk/*

# Install development tools
RUN go install github.com/air-verse/air@latest && \
    go install gotest.tools/gotestsum@latest && \
    echo "Development tools installed"

# Install security scanning tools
RUN go install github.com/securego/gosec/v2/cmd/gosec@latest && \
    go install golang.org/x/vuln/cmd/govulncheck@latest && \
    go install honnef.co/go/tools/cmd/staticcheck@latest && \
    echo "Security scanning tools installed"

# Install golangci-lint
RUN curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | \
    sh -s -- -b /go/bin v1.64.2 && \
    echo "golangci-lint installed"

# Create non-root user with proper shell and groups
RUN addgroup -g 1001 developer && \
    adduser -D -s /bin/bash -u 1001 -G developer developer && \
    echo "developer:developer" | chpasswd 2>/dev/null || true

# Set working directory
WORKDIR /app

# Create necessary directories with proper permissions
RUN mkdir -p \
    /workspace \
    /home/developer/.config/generator \
    /home/developer/.cache/generator \
    /home/developer/go/pkg/mod \
    /home/developer/.cache/go-build \
    /home/developer/.ssh \
    /home/developer/bin && \
    chown -R developer:developer /app /workspace /home/developer

# Switch to non-root user
USER developer

# Set environment variables
ENV GOOS=${TARGETOS:-linux}
ENV GOARCH=${TARGETARCH:-amd64}
ENV CGO_ENABLED=0
ENV GENERATOR_LOG_LEVEL=debug
ENV GOPATH=/home/developer/go
ENV GOCACHE=/home/developer/.cache/go-build
ENV GOMODCACHE=/home/developer/go/pkg/mod
ENV PATH=/home/developer/go/bin:/home/developer/bin:$PATH

# Configure Git (can be overridden with environment variables)
ENV GIT_AUTHOR_NAME="Developer"
ENV GIT_AUTHOR_EMAIL="developer@example.com"
ENV GIT_COMMITTER_NAME="Developer"
ENV GIT_COMMITTER_EMAIL="developer@example.com"

# Add bash aliases and helpful commands
RUN echo 'alias ll="ls -lah"' >> /home/developer/.bashrc && \
    echo 'alias gs="git status"' >> /home/developer/.bashrc && \
    echo 'alias gd="git diff"' >> /home/developer/.bashrc && \
    echo 'alias test="make test"' >> /home/developer/.bashrc && \
    echo 'alias lint="make lint"' >> /home/developer/.bashrc && \
    echo 'alias build="make build"' >> /home/developer/.bashrc && \
    echo 'echo "ðŸš€ Generator Development Environment Ready!"' >> /home/developer/.bashrc && \
    echo 'echo "Available commands: make build, make test, make lint, make security-scan"' >> /home/developer/.bashrc && \
    echo 'echo "Tools installed: air, gotestsum, gosec, govulncheck, staticcheck, golangci-lint"' >> /home/developer/.bashrc

# Health check to verify Go toolchain is working
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD go version || exit 1

# Expose common development ports (if needed)
# EXPOSE 8080 8081

# Default command opens an interactive bash shell
CMD ["bash"]