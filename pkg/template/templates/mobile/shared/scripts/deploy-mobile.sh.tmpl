#!/bin/bash

# {{.Name}} Mobile Deployment Script
# This script handles deployment of mobile applications to various environments

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="{{.Name}}"
ENVIRONMENT="${ENVIRONMENT:-staging}"
PLATFORM="${PLATFORM:-both}"

echo -e "${BLUE}üöÄ Deploying ${PROJECT_NAME} Mobile Apps${NC}"
echo -e "${BLUE}Environment: ${ENVIRONMENT}${NC}"
echo -e "${BLUE}Platform: ${PLATFORM}${NC}"

# Function to deploy Android
deploy_android() {
    echo -e "${YELLOW}üì± Deploying Android application...${NC}"
    
    if [ ! -d "android-kotlin" ]; then
        echo -e "${RED}‚ùå Android project not found${NC}"
        return 1
    fi
    
    cd android-kotlin
    
    case "$ENVIRONMENT" in
        "staging")
            echo -e "${YELLOW}üî® Building staging APK...${NC}"
            ./gradlew assembleStaging
            
            # Upload to Firebase App Distribution or similar
            if command -v firebase &> /dev/null; then
                echo -e "${YELLOW}üì§ Uploading to Firebase App Distribution...${NC}"
                firebase appdistribution:distribute \
                    app/build/outputs/apk/staging/app-staging.apk \
                    --app "$FIREBASE_ANDROID_APP_ID" \
                    --groups "testers" \
                    --release-notes "Staging build $(date)"
            fi
            ;;
            
        "production")
            echo -e "${YELLOW}üî® Building production AAB...${NC}"
            ./gradlew bundleRelease
            
            # Upload to Google Play Console
            echo -e "${YELLOW}üì§ Uploading to Google Play Console...${NC}"
            echo -e "${BLUE}Please manually upload the AAB to Google Play Console:${NC}"
            echo -e "${BLUE}app/build/outputs/bundle/release/app-release.aab${NC}"
            ;;
            
        *)
            echo -e "${RED}‚ùå Unknown environment: $ENVIRONMENT${NC}"
            return 1
            ;;
    esac
    
    cd ..
}

# Function to deploy iOS
deploy_ios() {
    # Check if running on macOS
    if [ "$(uname -s)" != "Darwin" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  iOS deployment is only supported on macOS${NC}"
        return 0
    fi
    
    echo -e "${YELLOW}üçé Deploying iOS application...${NC}"
    
    if [ ! -d "ios-swift" ]; then
        echo -e "${RED}‚ùå iOS project not found${NC}"
        return 1
    fi
    
    cd ios-swift
    
    case "$ENVIRONMENT" in
        "staging")
            echo -e "${YELLOW}üî® Building staging archive...${NC}"
            
            # Build archive
            xcodebuild archive \
                -workspace "${PROJECT_NAME}.xcworkspace" \
                -scheme "${PROJECT_NAME}" \
                -configuration "Staging" \
                -archivePath "build/${PROJECT_NAME}-staging.xcarchive"
            
            # Export IPA
            xcodebuild -exportArchive \
                -archivePath "build/${PROJECT_NAME}-staging.xcarchive" \
                -exportPath "build/staging" \
                -exportOptionsPlist "ExportOptions-Staging.plist"
            
            # Upload to TestFlight or Firebase
            if command -v firebase &> /dev/null; then
                echo -e "${YELLOW}üì§ Uploading to Firebase App Distribution...${NC}"
                firebase appdistribution:distribute \
                    "build/staging/${PROJECT_NAME}.ipa" \
                    --app "$FIREBASE_IOS_APP_ID" \
                    --groups "testers" \
                    --release-notes "Staging build $(date)"
            fi
            ;;
            
        "production")
            echo -e "${YELLOW}üî® Building production archive...${NC}"
            
            # Build archive
            xcodebuild archive \
                -workspace "${PROJECT_NAME}.xcworkspace" \
                -scheme "${PROJECT_NAME}" \
                -configuration "Release" \
                -archivePath "build/${PROJECT_NAME}-release.xcarchive"
            
            # Export IPA for App Store
            xcodebuild -exportArchive \
                -archivePath "build/${PROJECT_NAME}-release.xcarchive" \
                -exportPath "build/release" \
                -exportOptionsPlist "ExportOptions-AppStore.plist"
            
            # Upload to App Store Connect
            if command -v xcrun &> /dev/null; then
                echo -e "${YELLOW}üì§ Uploading to App Store Connect...${NC}"
                xcrun altool --upload-app \
                    --type ios \
                    --file "build/release/${PROJECT_NAME}.ipa" \
                    --username "$APPLE_ID" \
                    --password "$APPLE_APP_PASSWORD"
            else
                echo -e "${BLUE}Please manually upload the IPA to App Store Connect:${NC}"
                echo -e "${BLUE}build/release/${PROJECT_NAME}.ipa${NC}"
            fi
            ;;
            
        *)
            echo -e "${RED}‚ùå Unknown environment: $ENVIRONMENT${NC}"
            return 1
            ;;
    esac
    
    cd ..
}

# Function to validate environment variables
validate_environment() {
    case "$ENVIRONMENT" in
        "staging")
            # Check for Firebase CLI if using Firebase App Distribution
            if command -v firebase &> /dev/null; then
                echo -e "${GREEN}‚úÖ Firebase CLI found${NC}"
            else
                echo -e "${YELLOW}‚ö†Ô∏è  Firebase CLI not found. Install with: npm install -g firebase-tools${NC}"
            fi
            ;;
            
        "production")
            # Check for required environment variables
            if [ -z "$APPLE_ID" ] && [ "$PLATFORM" != "android" ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  APPLE_ID not set. Required for App Store uploads${NC}"
            fi
            
            if [ -z "$APPLE_APP_PASSWORD" ] && [ "$PLATFORM" != "android" ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  APPLE_APP_PASSWORD not set. Required for App Store uploads${NC}"
            fi
            ;;
    esac
}

# Function to send notifications
send_notification() {
    local status=$1
    local platform=$2
    
    if [ "$status" = "success" ]; then
        echo -e "${GREEN}‚úÖ ${platform} deployment completed successfully!${NC}"
    else
        echo -e "${RED}‚ùå ${platform} deployment failed!${NC}"
    fi
    
    # Send Slack notification if webhook is configured
    if [ -n "$SLACK_WEBHOOK_URL" ]; then
        local emoji="‚úÖ"
        local color="good"
        
        if [ "$status" != "success" ]; then
            emoji="‚ùå"
            color="danger"
        fi
        
        curl -X POST -H 'Content-type: application/json' \
            --data "{
                \"attachments\": [{
                    \"color\": \"$color\",
                    \"text\": \"$emoji ${PROJECT_NAME} ${platform} deployment to $ENVIRONMENT: $status\"
                }]
            }" \
            "$SLACK_WEBHOOK_URL"
    fi
}

# Main deployment process
main() {
    echo -e "${BLUE}Starting deployment process...${NC}"
    
    # Validate environment
    validate_environment
    
    # Deploy based on platform selection
    case "$PLATFORM" in
        "android")
            if deploy_android; then
                send_notification "success" "Android"
            else
                send_notification "failed" "Android"
                exit 1
            fi
            ;;
            
        "ios")
            if deploy_ios; then
                send_notification "success" "iOS"
            else
                send_notification "failed" "iOS"
                exit 1
            fi
            ;;
            
        "both")
            ANDROID_SUCCESS=true
            IOS_SUCCESS=true
            
            if ! deploy_android; then
                ANDROID_SUCCESS=false
            fi
            
            if ! deploy_ios; then
                IOS_SUCCESS=false
            fi
            
            if [ "$ANDROID_SUCCESS" = true ]; then
                send_notification "success" "Android"
            else
                send_notification "failed" "Android"
            fi
            
            if [ "$IOS_SUCCESS" = true ]; then
                send_notification "success" "iOS"
            else
                send_notification "failed" "iOS"
            fi
            
            if [ "$ANDROID_SUCCESS" = false ] || [ "$IOS_SUCCESS" = false ]; then
                exit 1
            fi
            ;;
            
        *)
            echo -e "${RED}‚ùå Unknown platform: $PLATFORM${NC}"
            echo -e "${YELLOW}Supported platforms: android, ios, both${NC}"
            exit 1
            ;;
    esac
    
    echo -e "${GREEN}üéâ Deployment process completed!${NC}"
}

# Show usage information
show_usage() {
    echo -e "${BLUE}Usage: $0 [OPTIONS]${NC}"
    echo -e "${BLUE}Options:${NC}"
    echo -e "${BLUE}  ENVIRONMENT=staging|production (default: staging)${NC}"
    echo -e "${BLUE}  PLATFORM=android|ios|both (default: both)${NC}"
    echo -e "${BLUE}${NC}"
    echo -e "${BLUE}Examples:${NC}"
    echo -e "${BLUE}  ENVIRONMENT=staging PLATFORM=android $0${NC}"
    echo -e "${BLUE}  ENVIRONMENT=production PLATFORM=ios $0${NC}"
    echo -e "${BLUE}  ENVIRONMENT=production PLATFORM=both $0${NC}"
}

# Check for help flag
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    show_usage
    exit 0
fi

# Run main function
main "$@"