#!/bin/bash

# {{.Name}} iOS Build Script
# This script builds the iOS application with proper configuration

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="{{.Name}}"
SCHEME="${SCHEME:-$PROJECT_NAME}"
CONFIGURATION="${CONFIGURATION:-Debug}"
DESTINATION="${DESTINATION:-generic/platform=iOS Simulator}"
ARCHIVE_PATH="build/${PROJECT_NAME}.xcarchive"
EXPORT_PATH="build/export"

echo -e "${BLUE}üöÄ Building ${PROJECT_NAME} iOS App${NC}"
echo -e "${BLUE}Scheme: ${SCHEME}${NC}"
echo -e "${BLUE}Configuration: ${CONFIGURATION}${NC}"
echo -e "${BLUE}Destination: ${DESTINATION}${NC}"

# Check if we're in the right directory
if [ ! -f "${PROJECT_NAME}.xcodeproj/project.pbxproj" ] && [ ! -f "${PROJECT_NAME}.xcworkspace/contents.xcworkspacedata" ]; then
    echo -e "${RED}‚ùå Error: Not in iOS project root directory${NC}"
    echo -e "${YELLOW}Please run this script from the iOS project root${NC}"
    exit 1
fi

# Check if Xcode is installed
if ! command -v xcodebuild &> /dev/null; then
    echo -e "${RED}‚ùå Error: Xcode command line tools not found${NC}"
    echo -e "${YELLOW}Please install Xcode and command line tools${NC}"
    exit 1
fi

# Determine project file
if [ -f "${PROJECT_NAME}.xcworkspace/contents.xcworkspacedata" ]; then
    PROJECT_FILE="${PROJECT_NAME}.xcworkspace"
    PROJECT_FLAG="-workspace"
else
    PROJECT_FILE="${PROJECT_NAME}.xcodeproj"
    PROJECT_FLAG="-project"
fi

echo -e "${BLUE}Using project file: ${PROJECT_FILE}${NC}"

# Install CocoaPods dependencies if Podfile exists
if [ -f "Podfile" ]; then
    echo -e "${YELLOW}üì¶ Installing CocoaPods dependencies...${NC}"
    if command -v pod &> /dev/null; then
        pod install --repo-update
    else
        echo -e "${RED}‚ùå Error: CocoaPods not found${NC}"
        echo -e "${YELLOW}Please install CocoaPods: sudo gem install cocoapods${NC}"
        exit 1
    fi
fi

# Clean build directory
echo -e "${YELLOW}üßπ Cleaning build directory...${NC}"
rm -rf build/
mkdir -p build

# Clean Xcode build
echo -e "${YELLOW}üßπ Cleaning Xcode build...${NC}"
xcodebuild clean \
    $PROJECT_FLAG "$PROJECT_FILE" \
    -scheme "$SCHEME" \
    -configuration "$CONFIGURATION"

# Run tests
echo -e "${YELLOW}üß™ Running tests...${NC}"
xcodebuild test \
    $PROJECT_FLAG "$PROJECT_FILE" \
    -scheme "$SCHEME" \
    -configuration "$CONFIGURATION" \
    -destination "$DESTINATION" \
    -quiet

# Build for simulator (Debug) or archive for device (Release)
if [ "$CONFIGURATION" = "Debug" ]; then
    echo -e "${YELLOW}üî® Building for simulator...${NC}"
    xcodebuild build \
        $PROJECT_FLAG "$PROJECT_FILE" \
        -scheme "$SCHEME" \
        -configuration "$CONFIGURATION" \
        -destination "$DESTINATION" \
        -quiet
        
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Simulator build completed successfully!${NC}"
        
        # Find and display app location
        APP_PATH=$(find ~/Library/Developer/Xcode/DerivedData -name "${PROJECT_NAME}.app" -type d | head -1)
        if [ -n "$APP_PATH" ]; then
            echo -e "${GREEN}üì± App built: $APP_PATH${NC}"
        fi
    else
        echo -e "${RED}‚ùå Simulator build failed!${NC}"
        exit 1
    fi
    
else
    echo -e "${YELLOW}üî® Creating archive for device...${NC}"
    xcodebuild archive \
        $PROJECT_FLAG "$PROJECT_FILE" \
        -scheme "$SCHEME" \
        -configuration "$CONFIGURATION" \
        -archivePath "$ARCHIVE_PATH" \
        -quiet
        
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Archive created successfully!${NC}"
        echo -e "${GREEN}üì¶ Archive location: $ARCHIVE_PATH${NC}"
        
        # Export IPA (requires export options plist)
        if [ -f "ExportOptions.plist" ]; then
            echo -e "${YELLOW}üì§ Exporting IPA...${NC}"
            xcodebuild -exportArchive \
                -archivePath "$ARCHIVE_PATH" \
                -exportPath "$EXPORT_PATH" \
                -exportOptionsPlist "ExportOptions.plist" \
                -quiet
                
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}‚úÖ IPA exported successfully!${NC}"
                
                # Find and display IPA location
                IPA_PATH=$(find "$EXPORT_PATH" -name "*.ipa" -type f | head -1)
                if [ -n "$IPA_PATH" ]; then
                    echo -e "${GREEN}üì± IPA generated: $IPA_PATH${NC}"
                    
                    # Display IPA size
                    IPA_SIZE=$(du -h "$IPA_PATH" | cut -f1)
                    echo -e "${GREEN}üìè IPA size: $IPA_SIZE${NC}"
                fi
            else
                echo -e "${RED}‚ùå IPA export failed!${NC}"
                exit 1
            fi
        else
            echo -e "${YELLOW}‚ö†Ô∏è  ExportOptions.plist not found. Skipping IPA export.${NC}"
            echo -e "${YELLOW}Create ExportOptions.plist to enable IPA export.${NC}"
        fi
    else
        echo -e "${RED}‚ùå Archive creation failed!${NC}"
        exit 1
    fi
fi

# Optional: Install on simulator if it's a debug build
if [ "$CONFIGURATION" = "Debug" ] && command -v xcrun &> /dev/null; then
    SIMULATORS=$(xcrun simctl list devices | grep "Booted" | wc -l)
    if [ $SIMULATORS -gt 0 ]; then
        echo -e "${YELLOW}üì± iOS Simulator detected. Install app? (y/n)${NC}"
        read -r INSTALL_CHOICE
        if [ "$INSTALL_CHOICE" = "y" ] || [ "$INSTALL_CHOICE" = "Y" ]; then
            echo -e "${YELLOW}üì≤ Installing app on simulator...${NC}"
            if [ -n "$APP_PATH" ]; then
                xcrun simctl install booted "$APP_PATH"
                if [ $? -eq 0 ]; then
                    echo -e "${GREEN}‚úÖ App installed successfully!${NC}"
                    
                    # Launch the app
                    BUNDLE_ID="{{.Organization}}.${PROJECT_NAME}"
                    xcrun simctl launch booted "$BUNDLE_ID"
                    echo -e "${GREEN}üöÄ App launched on simulator!${NC}"
                else
                    echo -e "${RED}‚ùå Failed to install app${NC}"
                fi
            fi
        fi
    fi
fi

echo -e "${GREEN}üéâ iOS build process completed!${NC}"