#!/bin/bash

# {{.Name}} Mobile Setup Script
# This script sets up the development environment for both Android and iOS

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üöÄ Setting up {{.Name}} Mobile Development Environment${NC}"

# Detect operating system
OS="$(uname -s)"
case "${OS}" in
    Linux*)     MACHINE=Linux;;
    Darwin*)    MACHINE=Mac;;
    CYGWIN*)    MACHINE=Cygwin;;
    MINGW*)     MACHINE=MinGw;;
    *)          MACHINE="UNKNOWN:${OS}"
esac

echo -e "${BLUE}Detected OS: ${MACHINE}${NC}"

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install Android dependencies
setup_android() {
    echo -e "${YELLOW}üì± Setting up Android development environment...${NC}"
    
    # Check for Java
    if command_exists java; then
        JAVA_VERSION=$(java -version 2>&1 | head -n 1 | cut -d'"' -f2)
        echo -e "${GREEN}‚úÖ Java found: $JAVA_VERSION${NC}"
    else
        echo -e "${RED}‚ùå Java not found${NC}"
        if [ "$MACHINE" = "Mac" ]; then
            echo -e "${YELLOW}Installing Java via Homebrew...${NC}"
            brew install openjdk@17
        else
            echo -e "${YELLOW}Please install Java 17 or later${NC}"
        fi
    fi
    
    # Check for Android SDK
    if [ -n "$ANDROID_HOME" ] && [ -d "$ANDROID_HOME" ]; then
        echo -e "${GREEN}‚úÖ Android SDK found: $ANDROID_HOME${NC}"
    else
        echo -e "${RED}‚ùå Android SDK not found${NC}"
        echo -e "${YELLOW}Please install Android Studio and set ANDROID_HOME${NC}"
        if [ "$MACHINE" = "Mac" ]; then
            echo -e "${YELLOW}You can install via: brew install --cask android-studio${NC}"
        fi
    fi
    
    # Navigate to Android project and setup
    if [ -d "android-kotlin" ]; then
        cd android-kotlin
        
        # Make gradlew executable
        if [ -f "gradlew" ]; then
            chmod +x gradlew
            echo -e "${GREEN}‚úÖ Made gradlew executable${NC}"
        fi
        
        # Download dependencies
        echo -e "${YELLOW}üì¶ Downloading Android dependencies...${NC}"
        ./gradlew dependencies --quiet
        
        cd ..
    fi
}

# Function to install iOS dependencies (macOS only)
setup_ios() {
    if [ "$MACHINE" != "Mac" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  iOS development is only supported on macOS${NC}"
        return
    fi
    
    echo -e "${YELLOW}üçé Setting up iOS development environment...${NC}"
    
    # Check for Xcode
    if command_exists xcodebuild; then
        XCODE_VERSION=$(xcodebuild -version | head -n 1)
        echo -e "${GREEN}‚úÖ Xcode found: $XCODE_VERSION${NC}"
    else
        echo -e "${RED}‚ùå Xcode not found${NC}"
        echo -e "${YELLOW}Please install Xcode from the App Store${NC}"
        return
    fi
    
    # Check for CocoaPods
    if command_exists pod; then
        POD_VERSION=$(pod --version)
        echo -e "${GREEN}‚úÖ CocoaPods found: $POD_VERSION${NC}"
    else
        echo -e "${YELLOW}Installing CocoaPods...${NC}"
        sudo gem install cocoapods
    fi
    
    # Navigate to iOS project and setup
    if [ -d "ios-swift" ]; then
        cd ios-swift
        
        # Install pods
        if [ -f "Podfile" ]; then
            echo -e "${YELLOW}üì¶ Installing iOS dependencies...${NC}"
            pod install --repo-update
        fi
        
        cd ..
    fi
}

# Function to setup shared resources
setup_shared() {
    echo -e "${YELLOW}üìö Setting up shared resources...${NC}"
    
    if [ -d "shared" ]; then
        cd shared
        
        # Create necessary directories
        mkdir -p assets/images
        mkdir -p assets/fonts
        mkdir -p assets/colors
        mkdir -p api
        mkdir -p design-system
        mkdir -p scripts
        
        # Make scripts executable
        if [ -d "scripts" ]; then
            chmod +x scripts/*.sh 2>/dev/null || true
            echo -e "${GREEN}‚úÖ Made build scripts executable${NC}"
        fi
        
        cd ..
    fi
}

# Function to install development tools
install_dev_tools() {
    echo -e "${YELLOW}üõ†Ô∏è  Installing development tools...${NC}"
    
    if [ "$MACHINE" = "Mac" ]; then
        # Check for Homebrew
        if command_exists brew; then
            echo -e "${GREEN}‚úÖ Homebrew found${NC}"
        else
            echo -e "${YELLOW}Installing Homebrew...${NC}"
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        fi
        
        # Install useful tools
        echo -e "${YELLOW}Installing development tools via Homebrew...${NC}"
        brew install git node watchman
        
        # Install React Native CLI
        if command_exists npm; then
            npm install -g @react-native-community/cli
        fi
    fi
    
    # Check for Git
    if command_exists git; then
        GIT_VERSION=$(git --version)
        echo -e "${GREEN}‚úÖ Git found: $GIT_VERSION${NC}"
    else
        echo -e "${RED}‚ùå Git not found. Please install Git${NC}"
    fi
}

# Main setup process
main() {
    echo -e "${BLUE}Starting setup process...${NC}"
    
    # Install development tools
    install_dev_tools
    
    # Setup shared resources
    setup_shared
    
    # Setup Android
    setup_android
    
    # Setup iOS (macOS only)
    setup_ios
    
    echo -e "${GREEN}üéâ Mobile development environment setup completed!${NC}"
    echo -e "${BLUE}Next steps:${NC}"
    echo -e "${BLUE}1. Open Android Studio and import the android-kotlin project${NC}"
    if [ "$MACHINE" = "Mac" ]; then
        echo -e "${BLUE}2. Open Xcode and open the ios-swift project${NC}"
    fi
    echo -e "${BLUE}3. Configure your API endpoints in the respective projects${NC}"
    echo -e "${BLUE}4. Run the build scripts to test your setup${NC}"
    
    # Display useful commands
    echo -e "${YELLOW}Useful commands:${NC}"
    echo -e "${YELLOW}  Android build: ./shared/scripts/build-android.sh${NC}"
    if [ "$MACHINE" = "Mac" ]; then
        echo -e "${YELLOW}  iOS build: ./shared/scripts/build-ios.sh${NC}"
    fi
}

# Run main function
main "$@"