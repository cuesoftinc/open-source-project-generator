import XCTest
import Combine
@testable import {{.Name}}

final class NetworkServiceTests: XCTestCase {
    var networkService: NetworkServiceImpl!
    var cancellables: Set<AnyCancellable>!
    
    override func setUpWithError() throws {
        networkService = NetworkServiceImpl()
        cancellables = Set<AnyCancellable>()
    }
    
    override func tearDownWithError() throws {
        networkService = nil
        cancellables = nil
    }
    
    func testAPIEndpointCreation() throws {
        // Given
        let endpoint = APIEndpoint.getUsers(page: 1, limit: 10)
        
        // Then
        XCTAssertEqual(endpoint.path, "users")
        XCTAssertEqual(endpoint.method, .get)
        XCTAssertNotNil(endpoint.parameters)
        
        if let parameters = endpoint.parameters {
            XCTAssertEqual(parameters["page"] as? Int, 1)
            XCTAssertEqual(parameters["limit"] as? Int, 10)
        }
    }
    
    func testLoginEndpoint() throws {
        // Given
        let endpoint = APIEndpoint.login(email: "test@example.com", password: "password")
        
        // Then
        XCTAssertEqual(endpoint.path, "auth/login")
        XCTAssertEqual(endpoint.method, .post)
        XCTAssertNotNil(endpoint.parameters)
        
        if let parameters = endpoint.parameters {
            XCTAssertEqual(parameters["email"] as? String, "test@example.com")
            XCTAssertEqual(parameters["password"] as? String, "password")
        }
    }
    
    func testUserByIdEndpoint() throws {
        // Given
        let userId = "123"
        let endpoint = APIEndpoint.getUserById(userId)
        
        // Then
        XCTAssertEqual(endpoint.path, "users/123")
        XCTAssertEqual(endpoint.method, .get)
        XCTAssertNil(endpoint.parameters)
    }
    
    func testDeleteUserEndpoint() throws {
        // Given
        let userId = "123"
        let endpoint = APIEndpoint.deleteUser(userId)
        
        // Then
        XCTAssertEqual(endpoint.path, "users/123")
        XCTAssertEqual(endpoint.method, .delete)
        XCTAssertNil(endpoint.parameters)
    }
}