import XCTest
import Combine
@testable import {{.Name}}

final class UserViewModelTests: XCTestCase {
    var viewModel: UserViewModel!
    var mockRepository: MockUserRepository!
    var cancellables: Set<AnyCancellable>!
    
    override func setUpWithError() throws {
        mockRepository = MockUserRepository()
        viewModel = UserViewModel(userRepository: mockRepository)
        cancellables = Set<AnyCancellable>()
    }
    
    override func tearDownWithError() throws {
        viewModel = nil
        mockRepository = nil
        cancellables = nil
    }
    
    func testLoadUsersSuccess() throws {
        // Given
        let expectation = XCTestExpectation(description: "Users loaded")
        
        // When
        viewModel.$users
            .dropFirst() // Skip initial empty array
            .sink { users in
                // Then
                XCTAssertEqual(users.count, 2)
                XCTAssertEqual(users.first?.name, "User 1")
                expectation.fulfill()
            }
            .store(in: &cancellables)
        
        viewModel.loadUsers()
        
        wait(for: [expectation], timeout: 1.0)
    }
    
    func testLoginSuccess() throws {
        // Given
        let expectation = XCTestExpectation(description: "Login successful")
        
        // When
        viewModel.$currentUser
            .compactMap { $0 }
            .sink { user in
                // Then
                XCTAssertEqual(user.email, "test@example.com")
                XCTAssertEqual(user.name, "Test User")
                expectation.fulfill()
            }
            .store(in: &cancellables)
        
        viewModel.login(email: "test@example.com", password: "password")
        
        wait(for: [expectation], timeout: 1.0)
    }
    
    func testLoadingState() throws {
        // Given
        let expectation = XCTestExpectation(description: "Loading state changes")
        var loadingStates: [Bool] = []
        
        // When
        viewModel.$isLoading
            .sink { isLoading in
                loadingStates.append(isLoading)
                if loadingStates.count == 3 { // initial false, true, false
                    expectation.fulfill()
                }
            }
            .store(in: &cancellables)
        
        viewModel.loadUsers()
        
        wait(for: [expectation], timeout: 1.0)
        
        // Then
        XCTAssertEqual(loadingStates, [false, true, false])
    }
    
    func testClearError() throws {
        // Given
        viewModel.errorMessage = "Test error"
        
        // When
        viewModel.clearError()
        
        // Then
        XCTAssertNil(viewModel.errorMessage)
    }
}