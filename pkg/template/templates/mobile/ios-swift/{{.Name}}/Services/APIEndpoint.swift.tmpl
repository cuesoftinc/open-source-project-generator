import Foundation
import Alamofire

struct APIEndpoint {
    let path: String
    let method: HTTPMethod
    let parameters: Parameters?
    let encoding: ParameterEncoding
    let headers: HTTPHeaders?
    
    init(
        path: String,
        method: HTTPMethod = .get,
        parameters: Parameters? = nil,
        encoding: ParameterEncoding = URLEncoding.default,
        headers: HTTPHeaders? = nil
    ) {
        self.path = path
        self.method = method
        self.parameters = parameters
        self.encoding = encoding
        self.headers = headers
    }
}

extension APIEndpoint {
    static func login(email: String, password: String) -> APIEndpoint {
        return APIEndpoint(
            path: "auth/login",
            method: .post,
            parameters: [
                "email": email,
                "password": password
            ],
            encoding: JSONEncoding.default,
            headers: ["Content-Type": "application/json"]
        )
    }
    
    static func getUsers(page: Int = 1, limit: Int = 20) -> APIEndpoint {
        return APIEndpoint(
            path: "users",
            method: .get,
            parameters: [
                "page": page,
                "limit": limit
            ]
        )
    }
    
    static func getUserById(_ id: String) -> APIEndpoint {
        return APIEndpoint(
            path: "users/\(id)",
            method: .get
        )
    }
    
    static func getUserProfile() -> APIEndpoint {
        return APIEndpoint(
            path: "users/profile",
            method: .get
        )
    }
    
    static func updateUser(_ user: User) -> APIEndpoint {
        return APIEndpoint(
            path: "users/\(user.id)",
            method: .put,
            parameters: try? user.asDictionary(),
            encoding: JSONEncoding.default,
            headers: ["Content-Type": "application/json"]
        )
    }
    
    static func deleteUser(_ id: String) -> APIEndpoint {
        return APIEndpoint(
            path: "users/\(id)",
            method: .delete
        )
    }
}

extension Encodable {
    func asDictionary() throws -> [String: Any] {
        let data = try JSONEncoder().encode(self)
        guard let dictionary = try JSONSerialization.jsonObject(with: data, options: .allowFragments) as? [String: Any] else {
            throw NSError()
        }
        return dictionary
    }
}