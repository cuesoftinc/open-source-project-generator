#!/bin/bash

# {{.Name}} - Docker Build Script
# This script builds all Docker images for the project

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_NAME="{{.Name}}"
REGISTRY="${DOCKER_REGISTRY:-localhost:5000}"
TAG="${BUILD_TAG:-latest}"
BUILD_ARGS="${BUILD_ARGS:-}"

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    if ! command -v docker &> /dev/null; then
        log_error "Docker is not installed or not in PATH"
        exit 1
    fi
    
    if ! docker info &> /dev/null; then
        log_error "Docker daemon is not running"
        exit 1
    fi
    
    log_success "Prerequisites check passed"
}

# Build image function
build_image() {
    local service=$1
    local dockerfile=$2
    local context=$3
    local image_name="${REGISTRY}/${PROJECT_NAME}-${service}:${TAG}"
    
    log_info "Building ${service} image..."
    
    # Security scan before build
    if command -v trivy &> /dev/null; then
        log_info "Scanning Dockerfile for security issues..."
        trivy config "${dockerfile}" || log_warning "Security scan found issues in ${dockerfile}"
    fi
    
    # Build with security options
    docker build \
        --file "${dockerfile}" \
        --tag "${image_name}" \
        --label "org.opencontainers.image.created=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
        --label "org.opencontainers.image.version=${TAG}" \
        --label "org.opencontainers.image.source=https://github.com/{{.Organization}}/{{.Name}}" \
        --label "org.opencontainers.image.title={{.Name}}-${service}" \
        --label "org.opencontainers.image.description={{.Description}}" \
        --security-opt no-new-privileges:true \
        ${BUILD_ARGS} \
        "${context}"
    
    if [ $? -eq 0 ]; then
        log_success "Successfully built ${service} image: ${image_name}"
        
        # Security scan after build
        if command -v trivy &> /dev/null; then
            log_info "Scanning ${service} image for vulnerabilities..."
            trivy image --exit-code 1 --severity HIGH,CRITICAL "${image_name}" || {
                log_warning "Vulnerabilities found in ${image_name}"
                return 1
            }
        fi
        
        return 0
    else
        log_error "Failed to build ${service} image"
        return 1
    fi
}

# Main build process
main() {
    log_info "Starting Docker build process for ${PROJECT_NAME}"
    
    check_prerequisites
    
    # Build counter
    local built=0
    local failed=0
    
    {{if .Components.Frontend.NextJS.App}}
    # Build App frontend
    if build_image "app" "templates/infrastructure/docker/frontend.Dockerfile.tmpl" "./App"; then
        ((built++))
    else
        ((failed++))
    fi
    {{end}}
    
    {{if .Components.Frontend.NextJS.Home}}
    # Build Home frontend
    if build_image "home" "templates/infrastructure/docker/frontend.Dockerfile.tmpl" "./Home"; then
        ((built++))
    else
        ((failed++))
    fi
    {{end}}
    
    {{if .Components.Frontend.NextJS.Admin}}
    # Build Admin frontend
    if build_image "admin" "templates/infrastructure/docker/frontend.Dockerfile.tmpl" "./Admin"; then
        ((built++))
    else
        ((failed++))
    fi
    {{end}}
    
    {{if .Components.Backend.GoGin}}
    # Build Backend API
    if build_image "api" "templates/infrastructure/docker/backend.Dockerfile.tmpl" "./CommonServer"; then
        ((built++))
    else
        ((failed++))
    fi
    {{end}}
    
    # Build summary
    log_info "Build Summary:"
    log_success "Successfully built: ${built} images"
    if [ ${failed} -gt 0 ]; then
        log_error "Failed to build: ${failed} images"
        exit 1
    fi
    
    log_success "All images built successfully!"
    
    # List built images
    log_info "Built images:"
    docker images | grep "${REGISTRY}/${PROJECT_NAME}" | grep "${TAG}"
}

# Script execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi