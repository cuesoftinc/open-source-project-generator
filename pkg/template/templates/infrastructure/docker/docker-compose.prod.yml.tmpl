version: '3.8'

services:
  # Frontend Applications
  {{if .Components.Frontend.NextJS.App}}
  app:
    build:
      context: ./App
      dockerfile: ../templates/infrastructure/docker/frontend.Dockerfile.tmpl
      target: runner
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL:-http://api:8080}
    depends_on:
      - api
    networks:
      - {{.Name}}-network
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  {{end}}

  {{if .Components.Frontend.NextJS.Home}}
  home:
    build:
      context: ./Home
      dockerfile: ../templates/infrastructure/docker/frontend.Dockerfile.tmpl
      target: runner
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL:-http://api:8080}
    networks:
      - {{.Name}}-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  {{end}}

  {{if .Components.Frontend.NextJS.Admin}}
  admin:
    build:
      context: ./Admin
      dockerfile: ../templates/infrastructure/docker/frontend.Dockerfile.tmpl
      target: runner
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL:-http://api:8080}
    depends_on:
      - api
    networks:
      - {{.Name}}-network
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  {{end}}

  # Backend API
  {{if .Components.Backend.GoGin}}
  api:
    build:
      context: ./CommonServer
      dockerfile: ../templates/infrastructure/docker/backend.Dockerfile.tmpl
      target: runner
    ports:
      - "8080:8080"
    environment:
      - GO_ENV=production
      - DB_HOST=${DB_HOST:-postgres}
      - DB_PORT=${DB_PORT:-5432}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - postgres
      - redis
    networks:
      - {{.Name}}-network
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  {{end}}

  # Database
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./CommonServer/migrations:/docker-entrypoint-initdb.d
    networks:
      - {{.Name}}-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    networks:
      - {{.Name}}-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Deploy/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./Deploy/nginx/ssl:/etc/nginx/ssl
    depends_on:
      {{if .Components.Frontend.NextJS.App}}- app{{end}}
      {{if .Components.Frontend.NextJS.Home}}- home{{end}}
      {{if .Components.Frontend.NextJS.Admin}}- admin{{end}}
      {{if .Components.Backend.GoGin}}- api{{end}}
    networks:
      - {{.Name}}-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./Deploy/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - {{.Name}}-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./Deploy/monitoring/grafana:/etc/grafana/provisioning
    networks:
      - {{.Name}}-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 128M

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  {{.Name}}-network:
    driver: bridge