package utils

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestValidateEmail(t *testing.T) {
	t.Run("valid email addresses", func(t *testing.T) {
		validEmails := []string{
			"test@example.com",
			"user.name@domain.co.uk",
			"user+tag@example.org",
			"123@example.com",
			"test.email.with+symbol@example.com",
		}

		for _, email := range validEmails {
			assert.True(t, ValidateEmail(email), "Email should be valid: %s", email)
		}
	})

	t.Run("invalid email addresses", func(t *testing.T) {
		invalidEmails := []string{
			"",
			"invalid",
			"@example.com",
			"test@",
			"test..test@example.com",
			"test@example",
			"test@.com",
			"test @example.com",
		}

		for _, email := range invalidEmails {
			assert.False(t, ValidateEmail(email), "Email should be invalid: %s", email)
		}
	})
}

func TestValidatePassword(t *testing.T) {
	t.Run("valid passwords", func(t *testing.T) {
		validPasswords := []string{
			"password123",
			"MySecurePassword!",
			"12345678",
			"a".repeat(8),
		}

		for _, password := range validPasswords {
			assert.True(t, ValidatePassword(password), "Password should be valid: %s", password)
		}
	})

	t.Run("invalid passwords", func(t *testing.T) {
		invalidPasswords := []string{
			"",
			"short",
			"1234567", // 7 characters
		}

		for _, password := range invalidPasswords {
			assert.False(t, ValidatePassword(password), "Password should be invalid: %s", password)
		}
	})
}

func TestValidateUsername(t *testing.T) {
	t.Run("valid usernames", func(t *testing.T) {
		validUsernames := []string{
			"user",
			"user123",
			"user_name",
			"user-name",
			"User123",
			"a".repeat(3),
			"a".repeat(30),
		}

		for _, username := range validUsernames {
			assert.True(t, ValidateUsername(username), "Username should be valid: %s", username)
		}
	})

	t.Run("invalid usernames", func(t *testing.T) {
		invalidUsernames := []string{
			"",
			"us", // too short
			"a".repeat(31), // too long
			"user name", // contains space
			"user@name", // contains @
			"user.name", // contains dot
			"123user", // starts with number
			"-user", // starts with hyphen
			"_user", // starts with underscore
		}

		for _, username := range invalidUsernames {
			assert.False(t, ValidateUsername(username), "Username should be invalid: %s", username)
		}
	})
}

func TestSanitizeInput(t *testing.T) {
	t.Run("sanitize various inputs", func(t *testing.T) {
		testCases := []struct {
			input    string
			expected string
		}{
			{"  hello world  ", "hello world"},
			{"\t\ntest\r\n", "test"},
			{"<script>alert('xss')</script>", "&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;"},
			{"normal text", "normal text"},
			{"", ""},
		}

		for _, tc := range testCases {
			result := SanitizeInput(tc.input)
			assert.Equal(t, tc.expected, result, "Input: %s", tc.input)
		}
	})
}

func TestValidatePhoneNumber(t *testing.T) {
	t.Run("valid phone numbers", func(t *testing.T) {
		validPhones := []string{
			"+1234567890",
			"+12345678901",
			"+123456789012",
			"+1-234-567-8901",
			"+1 234 567 8901",
		}

		for _, phone := range validPhones {
			assert.True(t, ValidatePhoneNumber(phone), "Phone should be valid: %s", phone)
		}
	})

	t.Run("invalid phone numbers", func(t *testing.T) {
		invalidPhones := []string{
			"",
			"1234567890", // missing +
			"+123", // too short
			"+12345678901234567890", // too long
			"+abc1234567890", // contains letters
			"++1234567890", // double +
		}

		for _, phone := range invalidPhones {
			assert.False(t, ValidatePhoneNumber(phone), "Phone should be invalid: %s", phone)
		}
	})
}

// Helper function to repeat strings (for Go versions that don't have strings.Repeat)
func (s string) repeat(count int) string {
	result := ""
	for i := 0; i < count; i++ {
		result += s
	}
	return result
}