package testutils

import (
	"{{.Name}}/internal/models"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
	"gorm.io/gorm/logger"
)

// SetupTestDB creates an in-memory SQLite database for testing
func SetupTestDB() (*gorm.DB, error) {
	db, err := gorm.Open(sqlite.Open(":memory:"), &gorm.Config{
		Logger: logger.Default.LogMode(logger.Silent),
	})
	if err != nil {
		return nil, err
	}

	// Run migrations
	err = db.AutoMigrate(
		&models.User{},
		&models.Role{},
		&models.Permission{},
	)
	if err != nil {
		return nil, err
	}

	return db, nil
}

// CleanupTestDB cleans all data from test database
func CleanupTestDB(db *gorm.DB) error {
	// Delete all data in reverse order of dependencies
	if err := db.Exec("DELETE FROM user_roles").Error; err != nil {
		return err
	}
	if err := db.Exec("DELETE FROM role_permissions").Error; err != nil {
		return err
	}
	if err := db.Exec("DELETE FROM users").Error; err != nil {
		return err
	}
	if err := db.Exec("DELETE FROM roles").Error; err != nil {
		return err
	}
	if err := db.Exec("DELETE FROM permissions").Error; err != nil {
		return err
	}
	return nil
}

// SeedTestData creates test data for testing
func SeedTestData(db *gorm.DB) error {
	// Create test roles
	adminRole := &models.Role{
		Name:        "admin",
		Description: "Administrator role",
		IsActive:    true,
	}
	userRole := &models.Role{
		Name:        "user",
		Description: "Regular user role",
		IsActive:    true,
	}

	if err := db.Create(adminRole).Error; err != nil {
		return err
	}
	if err := db.Create(userRole).Error; err != nil {
		return err
	}

	// Create test permissions
	permissions := []*models.Permission{
		{Name: "users.read", Description: "Read users"},
		{Name: "users.write", Description: "Write users"},
		{Name: "users.delete", Description: "Delete users"},
		{Name: "admin.access", Description: "Access admin panel"},
	}

	for _, permission := range permissions {
		if err := db.Create(permission).Error; err != nil {
			return err
		}
	}

	// Create test users
	adminUser := &models.User{
		Email:     "admin@example.com",
		Username:  "admin",
		FirstName: "Admin",
		LastName:  "User",
		Password:  "hashedpassword",
		IsActive:  true,
		IsAdmin:   true,
	}

	regularUser := &models.User{
		Email:     "user@example.com",
		Username:  "user",
		FirstName: "Regular",
		LastName:  "User",
		Password:  "hashedpassword",
		IsActive:  true,
		IsAdmin:   false,
	}

	if err := db.Create(adminUser).Error; err != nil {
		return err
	}
	if err := db.Create(regularUser).Error; err != nil {
		return err
	}

	return nil
}