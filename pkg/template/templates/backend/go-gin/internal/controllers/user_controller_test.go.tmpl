package controllers

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"strconv"
	"testing"

	"{{.Name}}/internal/models"
	"{{.Name}}/internal/services/mocks"
	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func TestUserController_GetProfile(t *testing.T) {
	gin.SetMode(gin.TestMode)

	t.Run("successful profile retrieval", func(t *testing.T) {
		userService := new(mocks.UserService)
		controller := NewUserController(userService)

		expectedUser := &models.User{
			ID:        1,
			Email:     "test@example.com",
			Username:  "testuser",
			FirstName: "Test",
			LastName:  "User",
		}

		userService.On("GetByID", uint(1)).Return(expectedUser, nil).Once()

		req := httptest.NewRequest(http.MethodGet, "/users/profile", nil)
		w := httptest.NewRecorder()

		router := gin.New()
		router.Use(func(c *gin.Context) {
			c.Set("user_id", uint(1))
			c.Next()
		})
		router.GET("/users/profile", controller.GetProfile)
		router.ServeHTTP(w, req)

		assert.Equal(t, http.StatusOK, w.Code)

		var response models.UserResponse
		err := json.Unmarshal(w.Body.Bytes(), &response)
		assert.NoError(t, err)
		assert.Equal(t, expectedUser.Email, response.Email)

		userService.AssertExpectations(t)
	})
}

func TestUserController_UpdateProfile(t *testing.T) {
	gin.SetMode(gin.TestMode)

	t.Run("successful profile update", func(t *testing.T) {
		userService := new(mocks.UserService)
		controller := NewUserController(userService)

		updateRequest := models.UpdateUserRequest{
			FirstName: "Updated",
			LastName:  "User",
		}

		existingUser := &models.User{
			ID:        1,
			Email:     "test@example.com",
			Username:  "testuser",
			FirstName: "Test",
			LastName:  "User",
		}

		userService.On("GetByID", uint(1)).Return(existingUser, nil).Once()
		userService.On("Update", mock.AnythingOfType("*models.User")).Return(nil).Once()

		body, _ := json.Marshal(updateRequest)
		req := httptest.NewRequest(http.MethodPut, "/users/profile", bytes.NewBuffer(body))
		req.Header.Set("Content-Type", "application/json")
		w := httptest.NewRecorder()

		router := gin.New()
		router.Use(func(c *gin.Context) {
			c.Set("user_id", uint(1))
			c.Next()
		})
		router.PUT("/users/profile", controller.UpdateProfile)
		router.ServeHTTP(w, req)

		assert.Equal(t, http.StatusOK, w.Code)

		userService.AssertExpectations(t)
	})
}

func TestUserController_GetUsers(t *testing.T) {
	gin.SetMode(gin.TestMode)

	t.Run("successful users retrieval", func(t *testing.T) {
		userService := new(mocks.UserService)
		controller := NewUserController(userService)

		expectedUsers := []*models.User{
			{ID: 1, Email: "user1@example.com", Username: "user1"},
			{ID: 2, Email: "user2@example.com", Username: "user2"},
		}

		userService.On("GetAll", 1, 10).Return(expectedUsers, int64(2), nil).Once()

		req := httptest.NewRequest(http.MethodGet, "/users?page=1&limit=10", nil)
		w := httptest.NewRecorder()

		router := gin.New()
		router.GET("/users", controller.GetUsers)
		router.ServeHTTP(w, req)

		assert.Equal(t, http.StatusOK, w.Code)

		var response map[string]interface{}
		err := json.Unmarshal(w.Body.Bytes(), &response)
		assert.NoError(t, err)
		assert.Equal(t, float64(2), response["total"])

		userService.AssertExpectations(t)
	})
}

func TestUserController_GetUser(t *testing.T) {
	gin.SetMode(gin.TestMode)

	t.Run("successful user retrieval", func(t *testing.T) {
		userService := new(mocks.UserService)
		controller := NewUserController(userService)

		expectedUser := &models.User{
			ID:        1,
			Email:     "test@example.com",
			Username:  "testuser",
			FirstName: "Test",
			LastName:  "User",
		}

		userService.On("GetByID", uint(1)).Return(expectedUser, nil).Once()

		req := httptest.NewRequest(http.MethodGet, "/users/1", nil)
		w := httptest.NewRecorder()

		router := gin.New()
		router.GET("/users/:id", controller.GetUser)
		router.ServeHTTP(w, req)

		assert.Equal(t, http.StatusOK, w.Code)

		var response models.UserResponse
		err := json.Unmarshal(w.Body.Bytes(), &response)
		assert.NoError(t, err)
		assert.Equal(t, expectedUser.Email, response.Email)

		userService.AssertExpectations(t)
	})

	t.Run("invalid user ID", func(t *testing.T) {
		userService := new(mocks.UserService)
		controller := NewUserController(userService)

		req := httptest.NewRequest(http.MethodGet, "/users/invalid", nil)
		w := httptest.NewRecorder()

		router := gin.New()
		router.GET("/users/:id", controller.GetUser)
		router.ServeHTTP(w, req)

		assert.Equal(t, http.StatusBadRequest, w.Code)
	})
}