package services

import (
	"errors"
	"testing"

	"{{.Name}}/internal/models"
	"{{.Name}}/internal/repositories/mocks"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func TestUserService_Create(t *testing.T) {
	userRepo := new(mocks.UserRepository)
	userService := NewUserService(userRepo)

	t.Run("successful user creation", func(t *testing.T) {
		user := &models.User{
			Email:     "test@example.com",
			Username:  "testuser",
			FirstName: "Test",
			LastName:  "User",
			Password:  "password123",
		}

		userRepo.On("Create", mock.AnythingOfType("*models.User")).Return(nil).Once()
		userRepo.On("GetByEmail", user.Email).Return(nil, errors.New("user not found")).Once()
		userRepo.On("GetByUsername", user.Username).Return(nil, errors.New("user not found")).Once()

		err := userService.Create(user)
		assert.NoError(t, err)
		userRepo.AssertExpectations(t)
	})

	t.Run("user creation with existing email", func(t *testing.T) {
		user := &models.User{
			Email:     "existing@example.com",
			Username:  "testuser",
			FirstName: "Test",
			LastName:  "User",
			Password:  "password123",
		}

		existingUser := &models.User{ID: 1, Email: "existing@example.com"}
		userRepo.On("GetByEmail", user.Email).Return(existingUser, nil).Once()

		err := userService.Create(user)
		assert.Error(t, err)
		assert.Contains(t, err.Error(), "email already exists")
		userRepo.AssertExpectations(t)
	})

	t.Run("user creation with existing username", func(t *testing.T) {
		user := &models.User{
			Email:     "test@example.com",
			Username:  "existinguser",
			FirstName: "Test",
			LastName:  "User",
			Password:  "password123",
		}

		existingUser := &models.User{ID: 1, Username: "existinguser"}
		userRepo.On("GetByEmail", user.Email).Return(nil, errors.New("user not found")).Once()
		userRepo.On("GetByUsername", user.Username).Return(existingUser, nil).Once()

		err := userService.Create(user)
		assert.Error(t, err)
		assert.Contains(t, err.Error(), "username already exists")
		userRepo.AssertExpectations(t)
	})
}

func TestUserService_GetByID(t *testing.T) {
	userRepo := new(mocks.UserRepository)
	userService := NewUserService(userRepo)

	t.Run("successful user retrieval", func(t *testing.T) {
		expectedUser := &models.User{
			ID:        1,
			Email:     "test@example.com",
			Username:  "testuser",
			FirstName: "Test",
			LastName:  "User",
		}

		userRepo.On("GetByID", uint(1)).Return(expectedUser, nil).Once()

		user, err := userService.GetByID(1)
		assert.NoError(t, err)
		assert.Equal(t, expectedUser, user)
		userRepo.AssertExpectations(t)
	})

	t.Run("user not found", func(t *testing.T) {
		userRepo.On("GetByID", uint(999)).Return(nil, errors.New("user not found")).Once()

		user, err := userService.GetByID(999)
		assert.Error(t, err)
		assert.Nil(t, user)
		userRepo.AssertExpectations(t)
	})
}

func TestUserService_Update(t *testing.T) {
	userRepo := new(mocks.UserRepository)
	userService := NewUserService(userRepo)

	t.Run("successful user update", func(t *testing.T) {
		user := &models.User{
			ID:        1,
			Email:     "updated@example.com",
			Username:  "updateduser",
			FirstName: "Updated",
			LastName:  "User",
		}

		userRepo.On("Update", user).Return(nil).Once()
		userRepo.On("GetByEmail", user.Email).Return(nil, errors.New("user not found")).Once()
		userRepo.On("GetByUsername", user.Username).Return(nil, errors.New("user not found")).Once()

		err := userService.Update(user)
		assert.NoError(t, err)
		userRepo.AssertExpectations(t)
	})
}

func TestUserService_Delete(t *testing.T) {
	userRepo := new(mocks.UserRepository)
	userService := NewUserService(userRepo)

	t.Run("successful user deletion", func(t *testing.T) {
		userRepo.On("Delete", uint(1)).Return(nil).Once()

		err := userService.Delete(1)
		assert.NoError(t, err)
		userRepo.AssertExpectations(t)
	})

	t.Run("user deletion error", func(t *testing.T) {
		userRepo.On("Delete", uint(999)).Return(errors.New("user not found")).Once()

		err := userService.Delete(999)
		assert.Error(t, err)
		userRepo.AssertExpectations(t)
	})
}