package terraform

import (
	"fmt"

	"github.com/cuesoftinc/open-source-project-generator/pkg/models"
)

// MainGenerator handles main Terraform file generation
type MainGenerator struct{}

// NewMainGenerator creates a new main Terraform generator
func NewMainGenerator() *MainGenerator {
	return &MainGenerator{}
}

// GenerateMain generates main.tf content
func (mg *MainGenerator) GenerateMain(config *models.ProjectConfig) string {
	return fmt.Sprintf(`# %s Infrastructure
# Generated by Open Source Project Generator

terraform {
  required_version = ">= 1.0"
  
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }

  backend "s3" {
    # Configure your S3 backend here
    # bucket = "%s-terraform-state"
    # key    = "terraform.tfstate"
    # region = "us-west-2"
  }
}

provider "aws" {
  region = var.aws_region
  
  default_tags {
    tags = {
      Project     = var.project_name
      Environment = var.environment
      ManagedBy   = "terraform"
    }
  }
}

# VPC Module
module "vpc" {
  source = "./modules/vpc"
  
  project_name = var.project_name
  environment  = var.environment
  vpc_cidr     = var.vpc_cidr
}

# ECS Cluster
resource "aws_ecs_cluster" "main" {
  name = "%%{var.project_name}-%%{var.environment}"

  setting {
    name  = "containerInsights"
    value = "enabled"
  }
}

# Application Load Balancer
resource "aws_lb" "main" {
  name               = "%%{var.project_name}-%%{var.environment}-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.alb.id]
  subnets            = module.vpc.public_subnet_ids

  enable_deletion_protection = var.environment == "production"
}

# Security Group for ALB
resource "aws_security_group" "alb" {
  name_prefix = "%%{var.project_name}-%%{var.environment}-alb-"
  vpc_id      = module.vpc.vpc_id

  ingress {
    description = "HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "HTTPS"
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}`, config.Name, config.Name)
}
