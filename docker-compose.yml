# Docker Compose configuration for Open Source Project Generator
#
# This compose file provides multiple services for different use cases:
#
# PROFILES:
#   - production:  Production runtime service
#   - development: Development environment with hot reload
#   - testing:     Run tests in containerized environment
#   - build:       Build cross-platform binaries and packages
#   - lint:        Run linting and code quality checks
#   - security:    Run security scans
#
# USAGE EXAMPLES:
#
#   # Production - Generate a project
#   docker compose --profile production up generator
#   docker compose run --rm generator generate --help
#
#   # Development - Run with hot reload
#   docker compose --profile development up generator-dev
#   docker compose run --rm generator-dev bash
#
#   # Testing - Run all tests
#   docker compose --profile testing up generator-test
#   docker compose run --rm generator-test-coverage
#
#   # Build - Create distribution packages
#   docker compose --profile build up generator-build
#   docker compose run --rm generator-build-all
#
#   # Linting - Check code quality
#   docker compose --profile lint up generator-lint
#
#   # Security - Run security scans
#   docker compose --profile security up generator-security
#
# ENVIRONMENT VARIABLES:
#   DOCKER_REGISTRY           - Docker registry (default: ghcr.io)
#   GITHUB_REPOSITORY_OWNER   - Repository owner (default: cuesoftinc)
#   VERSION                   - Version tag (default: latest)
#   GIT_COMMIT                - Git commit hash (auto-detected)
#   BUILD_TIME                - Build timestamp (auto-detected)
#   OUTPUT_DIR                - Output directory (default: ./output)
#   CONFIG_DIR                - Config directory (default: ./config)

services:
  # =============================================================================
  # Production Service - Minimal runtime for generating projects
  # =============================================================================
  generator:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VERSION: ${VERSION:-latest}
        GIT_COMMIT: ${GIT_COMMIT:-unknown}
        BUILD_TIME: ${BUILD_TIME:-unknown}
    image: ${DOCKER_REGISTRY:-ghcr.io}/${GITHUB_REPOSITORY_OWNER:-cuesoftinc}/open-source-project-generator:${VERSION:-latest}
    container_name: generator
    user: "1001:1001"
    volumes:
      - ${OUTPUT_DIR:-./output}/generated:/workspace
      - ${CONFIG_DIR:-./config}:/home/generator/.config/generator:ro
      - generator-cache:/home/generator/.cache/generator
    environment:
      - GENERATOR_LOG_LEVEL=${GENERATOR_LOG_LEVEL:-info}
      - GENERATOR_CONFIG_DIR=/home/generator/.config/generator
      - GENERATOR_CACHE_DIR=/home/generator/.cache/generator
      - GENERATOR_OUTPUT_PATH=/workspace
    working_dir: /workspace
    command: ["--help"]
    healthcheck:
      test: ["CMD", "generator", "version"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 5s
    networks:
      - generator-network
    profiles:
      - production

  # =============================================================================
  # Development Service - Full development environment with hot reload
  # =============================================================================
  generator-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: ${DOCKER_REGISTRY:-ghcr.io}/${GITHUB_REPOSITORY_OWNER:-cuesoftinc}/open-source-project-generator:dev
    container_name: generator-dev
    user: "1001:1001"
    volumes:
      - .:/app
      - ${OUTPUT_DIR:-./output}/generated:/workspace
      - go-mod-cache-dev:/home/developer/go/pkg/mod
      - go-build-cache-dev:/home/developer/.cache/go-build
      - generator-config-dev:/home/developer/.config/generator
      - generator-cache-dev:/home/developer/.cache/generator
    environment:
      - GENERATOR_LOG_LEVEL=${GENERATOR_LOG_LEVEL:-debug}
      - CGO_ENABLED=0
      - GOPATH=/home/developer/go
      - GOCACHE=/home/developer/.cache/go-build
      - GOMODCACHE=/home/developer/go/pkg/mod
    working_dir: /app
    command: ["bash"]
    stdin_open: true
    tty: true
    healthcheck:
      test: ["CMD", "go", "version"]
      interval: 30s
      timeout: 3s
      retries: 3
    networks:
      - generator-network
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
        reservations:
          cpus: "1"
          memory: 1G
    profiles:
      - development

  # =============================================================================
  # Testing Services - Run tests in containerized environment
  # =============================================================================
  generator-test:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: ${DOCKER_REGISTRY:-ghcr.io}/${GITHUB_REPOSITORY_OWNER:-cuesoftinc}/open-source-project-generator:dev
    container_name: generator-test
    user: "1001:1001"
    volumes:
      - .:/app
      - go-mod-cache-dev:/home/developer/go/pkg/mod
      - go-build-cache-dev:/home/developer/.cache/go-build
    environment:
      - CGO_ENABLED=0
      - GOPATH=/home/developer/go
      - GOCACHE=/home/developer/.cache/go-build
      - GOMODCACHE=/home/developer/go/pkg/mod
    working_dir: /app
    command: ["go", "test", "-v", "./..."]
    networks:
      - generator-network
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 2G
    profiles:
      - testing

  generator-test-coverage:
    extends: generator-test
    container_name: generator-test-coverage
    command: ["go", "test", "-v", "-coverprofile=coverage.out", "./..."]
    profiles:
      - testing

  generator-test-integration:
    extends: generator-test
    container_name: generator-test-integration
    command: ["go", "test", "-v", "-tags=integration", "./pkg/integration/..."]
    profiles:
      - testing

  # =============================================================================
  # Build Service - Create cross-platform binaries and packages
  # =============================================================================
  generator-build:
    build:
      context: .
      dockerfile: Dockerfile.build
      args:
        VERSION: ${VERSION:-dev}
        GIT_COMMIT: ${GIT_COMMIT:-unknown}
        BUILD_TIME: ${BUILD_TIME:-unknown}
    image: ${DOCKER_REGISTRY:-ghcr.io}/${GITHUB_REPOSITORY_OWNER:-cuesoftinc}/open-source-project-generator:build
    container_name: generator-build
    user: "1001:1001"
    volumes:
      - .:/app
      - ${OUTPUT_DIR:-./output}/dist:/app/dist
      - ${OUTPUT_DIR:-./output}/packages:/app/packages
      - go-mod-cache-build:/home/builder/go/pkg/mod
      - go-build-cache-build:/home/builder/.cache/go-build
    environment:
      - VERSION=${VERSION:-dev}
      - GIT_COMMIT=${GIT_COMMIT:-unknown}
      - BUILD_TIME=${BUILD_TIME:-unknown}
      - CGO_ENABLED=0
      - GOPATH=/home/builder/go
      - GOCACHE=/home/builder/.cache/go-build
      - GOMODCACHE=/home/builder/go/pkg/mod
    working_dir: /app
    command: ["bash", "-c", "make build"]
    networks:
      - generator-network
    deploy:
      resources:
        limits:
          cpus: "4"
          memory: 4G
        reservations:
          cpus: "2"
          memory: 2G
    profiles:
      - build

  generator-build-all:
    extends: generator-build
    container_name: generator-build-all
    command: ["bash", "-c", "make build-all"]
    profiles:
      - build

  generator-package-all:
    extends: generator-build
    container_name: generator-package-all
    command: ["bash", "-c", "make package-all"]
    profiles:
      - build

  # =============================================================================
  # Linting Service - Code quality and style checks
  # =============================================================================
  generator-lint:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: ${DOCKER_REGISTRY:-ghcr.io}/${GITHUB_REPOSITORY_OWNER:-cuesoftinc}/open-source-project-generator:dev
    container_name: generator-lint
    user: "1001:1001"
    volumes:
      - .:/app
      - go-mod-cache-dev:/home/developer/go/pkg/mod
      - go-build-cache-dev:/home/developer/.cache/go-build
    environment:
      - GOPATH=/home/developer/go
      - GOCACHE=/home/developer/.cache/go-build
      - GOMODCACHE=/home/developer/go/pkg/mod
    working_dir: /app
    command: ["golangci-lint", "run"]
    networks:
      - generator-network
    profiles:
      - lint

  generator-fmt:
    extends: generator-lint
    container_name: generator-fmt
    command: ["go", "fmt", "./..."]
    profiles:
      - lint

  # =============================================================================
  # Security Scanning Services - Security and vulnerability checks
  # =============================================================================
  generator-security:
    build:
      context: .
      dockerfile: Dockerfile.dev
    image: ${DOCKER_REGISTRY:-ghcr.io}/${GITHUB_REPOSITORY_OWNER:-cuesoftinc}/open-source-project-generator:dev
    container_name: generator-security
    user: "1001:1001"
    volumes:
      - .:/app
      - go-mod-cache-dev:/home/developer/go/pkg/mod
    environment:
      - GOPATH=/home/developer/go
      - GOMODCACHE=/home/developer/go/pkg/mod
    working_dir: /app
    command: ["bash", "-c", "make security-scan"]
    networks:
      - generator-network
    profiles:
      - security

  generator-gosec:
    extends: generator-security
    container_name: generator-gosec
    command: ["gosec", "./..."]
    profiles:
      - security

  generator-govulncheck:
    extends: generator-security
    container_name: generator-govulncheck
    command: ["govulncheck", "./..."]
    profiles:
      - security

  generator-staticcheck:
    extends: generator-security
    container_name: generator-staticcheck
    command: ["staticcheck", "./..."]
    profiles:
      - security

# =============================================================================
# Networks
# =============================================================================
networks:
  generator-network:
    driver: bridge
    name: generator-network

# =============================================================================
# Volumes - Persistent storage for caches and data
# =============================================================================
volumes:
  # Development volumes
  go-mod-cache-dev:
    driver: local
    name: generator-go-mod-cache-dev
  go-build-cache-dev:
    driver: local
    name: generator-go-build-cache-dev
  generator-config-dev:
    driver: local
    name: generator-config-dev
  generator-cache-dev:
    driver: local
    name: generator-cache-dev

  # Build volumes
  go-mod-cache-build:
    driver: local
    name: generator-go-mod-cache-build
  go-build-cache-build:
    driver: local
    name: generator-go-build-cache-build

  # Production volumes
  generator-cache:
    driver: local
    name: generator-cache
