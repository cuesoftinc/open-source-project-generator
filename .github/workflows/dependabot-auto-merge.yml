name: Dependabot Auto-merge

on:
  pull_request_target:
    types: [opened, synchronize, reopened, labeled]

permissions:
  contents: write
  pull-requests: write
  checks: read

jobs:
  auto-merge:
    name: Auto-merge Dependabot PRs
    runs-on: ubuntu-latest
    if: github.event.pull_request.user.login == 'dependabot[bot]'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Get PR details
        id: pr
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT

          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "title=$PR_TITLE" >> $GITHUB_OUTPUT

      - name: Add dependencies label
        run: gh pr edit ${{ steps.pr.outputs.number }} --add-label "dependencies"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check update type
        id: check-update
        run: |
          PR_TITLE="${{ steps.pr.outputs.title }}"
          echo "Analyzing PR: $PR_TITLE"

          # Check if it's a security update
          if [[ "$PR_TITLE" =~ security ]]; then
            echo "is_security=true" >> $GITHUB_OUTPUT
            echo "is_safe=true" >> $GITHUB_OUTPUT
            echo "Security update detected"
            exit 0
          fi

          # Check if it's a grouped update
          if [[ "$PR_TITLE" =~ "Bump the" ]] && [[ "$PR_TITLE" =~ "group" ]]; then
            echo "is_safe=true" >> $GITHUB_OUTPUT
            echo "is_security=false" >> $GITHUB_OUTPUT
            echo "Grouped dependency update - safe to auto-merge"
            exit 0
          fi

          # Extract version numbers from title
          # Expected format: "Bump package from X.Y.Z to A.B.C"
          if [[ "$PR_TITLE" =~ from[[:space:]]+([0-9]+)\.([0-9]+)\.([0-9]+)[[:space:]]+to[[:space:]]+([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            OLD_MAJOR="${BASH_REMATCH[1]}"
            OLD_MINOR="${BASH_REMATCH[2]}"
            OLD_PATCH="${BASH_REMATCH[3]}"
            NEW_MAJOR="${BASH_REMATCH[4]}"
            NEW_MINOR="${BASH_REMATCH[5]}"
            NEW_PATCH="${BASH_REMATCH[6]}"
            
            echo "Version change: $OLD_MAJOR.$OLD_MINOR.$OLD_PATCH -> $NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
            
            # Check if major version changed
            if [ "$OLD_MAJOR" != "$NEW_MAJOR" ]; then
              echo "is_safe=false" >> $GITHUB_OUTPUT
              echo "Major version change detected - requires manual review"
            # Check if minor version changed (patch updates are safe)
            elif [ "$OLD_MINOR" != "$NEW_MINOR" ]; then
              echo "is_safe=true" >> $GITHUB_OUTPUT
              echo "Minor version change - safe to auto-merge"
            else
              echo "is_safe=true" >> $GITHUB_OUTPUT
              echo "Patch version change - safe to auto-merge"
            fi
          else
            echo "is_safe=false" >> $GITHUB_OUTPUT
            echo "Could not parse version numbers - requires manual review"
          fi

          echo "is_security=false" >> $GITHUB_OUTPUT

      - name: Wait for CI checks
        if: steps.check-update.outputs.is_safe == 'true'
        run: |
          echo "Waiting for CI checks to complete..."
          PR_NUMBER="${{ steps.pr.outputs.number }}"

          # Wait up to 10 minutes for checks to complete
          for i in {1..60}; do
            # Get all check statuses
            CHECKS=$(gh pr view $PR_NUMBER --json statusCheckRollup --jq '.statusCheckRollup')
            TOTAL=$(echo "$CHECKS" | jq 'length')
            
            # Ensure there are checks to wait for
            if [ "$TOTAL" -eq 0 ]; then
              echo "No CI checks found, waiting for checks to start..."
              sleep 10
              continue
            fi
            
            # Check if all required checks are complete
            PENDING=$(echo "$CHECKS" | jq '[.[] | select(.status == "IN_PROGRESS" or .status == "QUEUED")] | length')
            FAILED=$(echo "$CHECKS" | jq '[.[] | select(.conclusion == "FAILURE" or .conclusion == "CANCELLED")] | length')
            
            if [ "$FAILED" -gt 0 ]; then
              echo "CI checks failed"
              exit 1
            fi
            
            if [ "$PENDING" -eq 0 ] && [ "$TOTAL" -gt 0 ]; then
              echo "All CI checks passed!"
              exit 0
            fi
            
            echo "Waiting for CI... ($PENDING/$TOTAL checks pending, attempt $i/60)"
            sleep 10
          done

          echo "Timeout waiting for CI checks"
          exit 1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable auto-merge
        if: steps.check-update.outputs.is_safe == 'true'
        run: |
          if [ "${{ steps.check-update.outputs.is_security }}" == "true" ]; then
            echo "Enabling auto-merge for security update"
            gh pr merge ${{ steps.pr.outputs.number }} --auto --squash --delete-branch
          else
            echo "Enabling auto-merge for minor/patch update"
            gh pr merge ${{ steps.pr.outputs.number }} --auto --squash --delete-branch
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR
        if: steps.check-update.outputs.is_safe == 'false'
        run: |
          gh pr comment ${{ steps.pr.outputs.number }} --body "⚠️ This PR contains a major version update and requires manual review before merging."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
