# {{.Name}} Frontend - Component Makefile
# This Makefile provides commands specific to frontend development

# Colors for output
RED := \033[31m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
CYAN := \033[36m
RESET := \033[0m

# Configuration
NODE_VERSION := {{.Versions.Node}}
NEXT_VERSION := {{.Versions.NextJS}}
REACT_VERSION := {{.Versions.React}}

# Directories
{{if .Components.Frontend.MainApp}}APP_DIR := App{{end}}
{{if .Components.Frontend.Home}}HOME_DIR := Home{{end}}
{{if .Components.Frontend.Admin}}ADMIN_DIR := Admin{{end}}
SHARED_DIR := shared-components

# Default target
.DEFAULT_GOAL := help

##@ Help

.PHONY: help
help: ## Display frontend-specific help
	@echo "$(CYAN){{.Name}} Frontend Commands$(RESET)"
	@echo ""
	@awk 'BEGIN {FS = ":.*##"; printf "$(YELLOW)Available targets:$(RESET)\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  $(CYAN)%-20s$(RESET) %s\n", $$1, $$2 } /^##@/ { printf "\n$(BLUE)%s$(RESET)\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

##@ Development

.PHONY: dev
dev: ## Start all frontend development servers
	@echo "$(GREEN)Starting all frontend development servers...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) dev-app &{{end}}
{{if .Components.Frontend.Home}}	@$(MAKE) dev-home &{{end}}
{{if .Components.Frontend.Admin}}	@$(MAKE) dev-admin &{{end}}
	@echo "$(CYAN)All frontend servers started. Press Ctrl+C to stop.$(RESET)"
	@wait

{{if .Components.Frontend.MainApp}}.PHONY: dev-app
dev-app: ## Start main application development server
	@echo "$(BLUE)Starting main application development server...$(RESET)"
	@cd $(APP_DIR) && npm run dev{{end}}

{{if .Components.Frontend.Home}}.PHONY: dev-home
dev-home: ## Start home page development server
	@echo "$(BLUE)Starting home page development server...$(RESET)"
	@cd $(HOME_DIR) && npm run dev{{end}}

{{if .Components.Frontend.Admin}}.PHONY: dev-admin
dev-admin: ## Start admin dashboard development server
	@echo "$(BLUE)Starting admin dashboard development server...$(RESET)"
	@cd $(ADMIN_DIR) && npm run dev{{end}}

.PHONY: dev-shared
dev-shared: ## Start shared components development
	@echo "$(BLUE)Starting shared components development...$(RESET)"
	@cd $(SHARED_DIR) && npm run dev

##@ Installation

.PHONY: install
install: ## Install all frontend dependencies
	@echo "$(BLUE)Installing all frontend dependencies...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) install-app{{end}}
{{if .Components.Frontend.Home}}	@$(MAKE) install-home{{end}}
{{if .Components.Frontend.Admin}}	@$(MAKE) install-admin{{end}}
	@$(MAKE) install-shared
	@echo "$(GREEN)✅ All frontend dependencies installed$(RESET)"

{{if .Components.Frontend.MainApp}}.PHONY: install-app
install-app: ## Install main application dependencies
	@echo "$(CYAN)Installing main application dependencies...$(RESET)"
	@cd $(APP_DIR) && npm ci{{end}}

{{if .Components.Frontend.Home}}.PHONY: install-home
install-home: ## Install home page dependencies
	@echo "$(CYAN)Installing home page dependencies...$(RESET)"
	@cd $(HOME_DIR) && npm ci{{end}}

{{if .Components.Frontend.Admin}}.PHONY: install-admin
install-admin: ## Install admin dashboard dependencies
	@echo "$(CYAN)Installing admin dashboard dependencies...$(RESET)"
	@cd $(ADMIN_DIR) && npm ci{{end}}

.PHONY: install-shared
install-shared: ## Install shared components dependencies
	@echo "$(CYAN)Installing shared components dependencies...$(RESET)"
	@cd $(SHARED_DIR) && npm ci

##@ Building

.PHONY: build
build: ## Build all frontend applications
	@echo "$(BLUE)Building all frontend applications...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) build-app{{end}}
{{if .Components.Frontend.Home}}	@$(MAKE) build-home{{end}}
{{if .Components.Frontend.Admin}}	@$(MAKE) build-admin{{end}}
	@$(MAKE) build-shared
	@echo "$(GREEN)✅ All frontend applications built$(RESET)"

{{if .Components.Frontend.MainApp}}.PHONY: build-app
build-app: ## Build main application
	@echo "$(CYAN)Building main application...$(RESET)"
	@cd $(APP_DIR) && npm run build{{end}}

{{if .Components.Frontend.Home}}.PHONY: build-home
build-home: ## Build home page
	@echo "$(CYAN)Building home page...$(RESET)"
	@cd $(HOME_DIR) && npm run build{{end}}

{{if .Components.Frontend.Admin}}.PHONY: build-admin
build-admin: ## Build admin dashboard
	@echo "$(CYAN)Building admin dashboard...$(RESET)"
	@cd $(ADMIN_DIR) && npm run build{{end}}

.PHONY: build-shared
build-shared: ## Build shared components
	@echo "$(CYAN)Building shared components...$(RESET)"
	@cd $(SHARED_DIR) && npm run build

##@ Testing

.PHONY: test
test: ## Run all frontend tests
	@echo "$(BLUE)Running all frontend tests...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) test-app{{end}}
{{if .Components.Frontend.Home}}	@$(MAKE) test-home{{end}}
{{if .Components.Frontend.Admin}}	@$(MAKE) test-admin{{end}}
	@$(MAKE) test-shared
	@echo "$(GREEN)✅ All frontend tests completed$(RESET)"

{{if .Components.Frontend.MainApp}}.PHONY: test-app
test-app: ## Run main application tests
	@echo "$(CYAN)Running main application tests...$(RESET)"
	@cd $(APP_DIR) && npm test -- --run{{end}}

{{if .Components.Frontend.Home}}.PHONY: test-home
test-home: ## Run home page tests
	@echo "$(CYAN)Running home page tests...$(RESET)"
	@cd $(HOME_DIR) && npm test -- --run{{end}}

{{if .Components.Frontend.Admin}}.PHONY: test-admin
test-admin: ## Run admin dashboard tests
	@echo "$(CYAN)Running admin dashboard tests...$(RESET)"
	@cd $(ADMIN_DIR) && npm test -- --run{{end}}

.PHONY: test-shared
test-shared: ## Run shared components tests
	@echo "$(CYAN)Running shared components tests...$(RESET)"
	@cd $(SHARED_DIR) && npm test -- --run

.PHONY: test-watch
test-watch: ## Run tests in watch mode
	@echo "$(BLUE)Running tests in watch mode...$(RESET)"
{{if .Components.Frontend.MainApp}}	@cd $(APP_DIR) && npm test{{end}}

.PHONY: test-coverage
test-coverage: ## Run tests with coverage
	@echo "$(BLUE)Running tests with coverage...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) test-coverage-app{{end}}
{{if .Components.Frontend.Home}}	@$(MAKE) test-coverage-home{{end}}
{{if .Components.Frontend.Admin}}	@$(MAKE) test-coverage-admin{{end}}
	@$(MAKE) test-coverage-shared

{{if .Components.Frontend.MainApp}}.PHONY: test-coverage-app
test-coverage-app: ## Run main application tests with coverage
	@echo "$(CYAN)Running main application tests with coverage...$(RESET)"
	@cd $(APP_DIR) && npm run test:coverage{{end}}

{{if .Components.Frontend.Home}}.PHONY: test-coverage-home
test-coverage-home: ## Run home page tests with coverage
	@echo "$(CYAN)Running home page tests with coverage...$(RESET)"
	@cd $(HOME_DIR) && npm run test:coverage{{end}}

{{if .Components.Frontend.Admin}}.PHONY: test-coverage-admin
test-coverage-admin: ## Run admin dashboard tests with coverage
	@echo "$(CYAN)Running admin dashboard tests with coverage...$(RESET)"
	@cd $(ADMIN_DIR) && npm run test:coverage{{end}}

.PHONY: test-coverage-shared
test-coverage-shared: ## Run shared components tests with coverage
	@echo "$(CYAN)Running shared components tests with coverage...$(RESET)"
	@cd $(SHARED_DIR) && npm run test:coverage

.PHONY: test-e2e
test-e2e: ## Run end-to-end tests
	@echo "$(BLUE)Running end-to-end tests...$(RESET)"
{{if .Components.Frontend.MainApp}}	@cd $(APP_DIR) && npm run test:e2e{{end}}

##@ Code Quality

.PHONY: lint
lint: ## Run linting on all frontend code
	@echo "$(BLUE)Running linting on all frontend code...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) lint-app{{end}}
{{if .Components.Frontend.Home}}	@$(MAKE) lint-home{{end}}
{{if .Components.Frontend.Admin}}	@$(MAKE) lint-admin{{end}}
	@$(MAKE) lint-shared
	@echo "$(GREEN)✅ All frontend linting completed$(RESET)"

{{if .Components.Frontend.MainApp}}.PHONY: lint-app
lint-app: ## Run linting on main application
	@echo "$(CYAN)Linting main application...$(RESET)"
	@cd $(APP_DIR) && npm run lint{{end}}

{{if .Components.Frontend.Home}}.PHONY: lint-home
lint-home: ## Run linting on home page
	@echo "$(CYAN)Linting home page...$(RESET)"
	@cd $(HOME_DIR) && npm run lint{{end}}

{{if .Components.Frontend.Admin}}.PHONY: lint-admin
lint-admin: ## Run linting on admin dashboard
	@echo "$(CYAN)Linting admin dashboard...$(RESET)"
	@cd $(ADMIN_DIR) && npm run lint{{end}}

.PHONY: lint-shared
lint-shared: ## Run linting on shared components
	@echo "$(CYAN)Linting shared components...$(RESET)"
	@cd $(SHARED_DIR) && npm run lint

.PHONY: lint-fix
lint-fix: ## Fix linting issues automatically
	@echo "$(BLUE)Fixing linting issues...$(RESET)"
{{if .Components.Frontend.MainApp}}	@cd $(APP_DIR) && npm run lint:fix{{end}}
{{if .Components.Frontend.Home}}	@cd $(HOME_DIR) && npm run lint:fix{{end}}
{{if .Components.Frontend.Admin}}	@cd $(ADMIN_DIR) && npm run lint:fix{{end}}
	@cd $(SHARED_DIR) && npm run lint:fix

.PHONY: format
format: ## Format all frontend code
	@echo "$(BLUE)Formatting all frontend code...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) format-app{{end}}
{{if .Components.Frontend.Home}}	@$(MAKE) format-home{{end}}
{{if .Components.Frontend.Admin}}	@$(MAKE) format-admin{{end}}
	@$(MAKE) format-shared
	@echo "$(GREEN)✅ All frontend code formatted$(RESET)"

{{if .Components.Frontend.MainApp}}.PHONY: format-app
format-app: ## Format main application code
	@echo "$(CYAN)Formatting main application...$(RESET)"
	@cd $(APP_DIR) && npm run format{{end}}

{{if .Components.Frontend.Home}}.PHONY: format-home
format-home: ## Format home page code
	@echo "$(CYAN)Formatting home page...$(RESET)"
	@cd $(HOME_DIR) && npm run format{{end}}

{{if .Components.Frontend.Admin}}.PHONY: format-admin
format-admin: ## Format admin dashboard code
	@echo "$(CYAN)Formatting admin dashboard...$(RESET)"
	@cd $(ADMIN_DIR) && npm run format{{end}}

.PHONY: format-shared
format-shared: ## Format shared components code
	@echo "$(CYAN)Formatting shared components...$(RESET)"
	@cd $(SHARED_DIR) && npm run format

.PHONY: typecheck
typecheck: ## Run TypeScript type checking
	@echo "$(BLUE)Running TypeScript type checking...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) typecheck-app{{end}}
{{if .Components.Frontend.Home}}	@$(MAKE) typecheck-home{{end}}
{{if .Components.Frontend.Admin}}	@$(MAKE) typecheck-admin{{end}}
	@$(MAKE) typecheck-shared
	@echo "$(GREEN)✅ All TypeScript type checking completed$(RESET)"

{{if .Components.Frontend.MainApp}}.PHONY: typecheck-app
typecheck-app: ## Run type checking on main application
	@echo "$(CYAN)Type checking main application...$(RESET)"
	@cd $(APP_DIR) && npm run typecheck{{end}}

{{if .Components.Frontend.Home}}.PHONY: typecheck-home
typecheck-home: ## Run type checking on home page
	@echo "$(CYAN)Type checking home page...$(RESET)"
	@cd $(HOME_DIR) && npm run typecheck{{end}}

{{if .Components.Frontend.Admin}}.PHONY: typecheck-admin
typecheck-admin: ## Run type checking on admin dashboard
	@echo "$(CYAN)Type checking admin dashboard...$(RESET)"
	@cd $(ADMIN_DIR) && npm run typecheck{{end}}

.PHONY: typecheck-shared
typecheck-shared: ## Run type checking on shared components
	@echo "$(CYAN)Type checking shared components...$(RESET)"
	@cd $(SHARED_DIR) && npm run typecheck

##@ Dependencies

.PHONY: update
update: ## Update all frontend dependencies
	@echo "$(BLUE)Updating all frontend dependencies...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) update-app{{end}}
{{if .Components.Frontend.Home}}	@$(MAKE) update-home{{end}}
{{if .Components.Frontend.Admin}}	@$(MAKE) update-admin{{end}}
	@$(MAKE) update-shared
	@echo "$(GREEN)✅ All frontend dependencies updated$(RESET)"

{{if .Components.Frontend.MainApp}}.PHONY: update-app
update-app: ## Update main application dependencies
	@echo "$(CYAN)Updating main application dependencies...$(RESET)"
	@cd $(APP_DIR) && npm update{{end}}

{{if .Components.Frontend.Home}}.PHONY: update-home
update-home: ## Update home page dependencies
	@echo "$(CYAN)Updating home page dependencies...$(RESET)"
	@cd $(HOME_DIR) && npm update{{end}}

{{if .Components.Frontend.Admin}}.PHONY: update-admin
update-admin: ## Update admin dashboard dependencies
	@echo "$(CYAN)Updating admin dashboard dependencies...$(RESET)"
	@cd $(ADMIN_DIR) && npm update{{end}}

.PHONY: update-shared
update-shared: ## Update shared components dependencies
	@echo "$(CYAN)Updating shared components dependencies...$(RESET)"
	@cd $(SHARED_DIR) && npm update

.PHONY: audit
audit: ## Run security audit on all frontend dependencies
	@echo "$(BLUE)Running security audit...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) audit-app{{end}}
{{if .Components.Frontend.Home}}	@$(MAKE) audit-home{{end}}
{{if .Components.Frontend.Admin}}	@$(MAKE) audit-admin{{end}}
	@$(MAKE) audit-shared

{{if .Components.Frontend.MainApp}}.PHONY: audit-app
audit-app: ## Run security audit on main application
	@echo "$(CYAN)Auditing main application...$(RESET)"
	@cd $(APP_DIR) && npm audit{{end}}

{{if .Components.Frontend.Home}}.PHONY: audit-home
audit-home: ## Run security audit on home page
	@echo "$(CYAN)Auditing home page...$(RESET)"
	@cd $(HOME_DIR) && npm audit{{end}}

{{if .Components.Frontend.Admin}}.PHONY: audit-admin
audit-admin: ## Run security audit on admin dashboard
	@echo "$(CYAN)Auditing admin dashboard...$(RESET)"
	@cd $(ADMIN_DIR) && npm audit{{end}}

.PHONY: audit-shared
audit-shared: ## Run security audit on shared components
	@echo "$(CYAN)Auditing shared components...$(RESET)"
	@cd $(SHARED_DIR) && npm audit

.PHONY: audit-fix
audit-fix: ## Fix security vulnerabilities automatically
	@echo "$(BLUE)Fixing security vulnerabilities...$(RESET)"
{{if .Components.Frontend.MainApp}}	@cd $(APP_DIR) && npm audit fix{{end}}
{{if .Components.Frontend.Home}}	@cd $(HOME_DIR) && npm audit fix{{end}}
{{if .Components.Frontend.Admin}}	@cd $(ADMIN_DIR) && npm audit fix{{end}}
	@cd $(SHARED_DIR) && npm audit fix

##@ Maintenance

.PHONY: clean
clean: ## Clean build artifacts and cache
	@echo "$(YELLOW)Cleaning frontend build artifacts...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) clean-app{{end}}
{{if .Components.Frontend.Home}}	@$(MAKE) clean-home{{end}}
{{if .Components.Frontend.Admin}}	@$(MAKE) clean-admin{{end}}
	@$(MAKE) clean-shared
	@echo "$(GREEN)✅ Frontend cleanup completed$(RESET)"

{{if .Components.Frontend.MainApp}}.PHONY: clean-app
clean-app: ## Clean main application artifacts
	@echo "$(CYAN)Cleaning main application...$(RESET)"
	@cd $(APP_DIR) && rm -rf .next dist build node_modules/.cache{{end}}

{{if .Components.Frontend.Home}}.PHONY: clean-home
clean-home: ## Clean home page artifacts
	@echo "$(CYAN)Cleaning home page...$(RESET)"
	@cd $(HOME_DIR) && rm -rf .next dist build node_modules/.cache{{end}}

{{if .Components.Frontend.Admin}}.PHONY: clean-admin
clean-admin: ## Clean admin dashboard artifacts
	@echo "$(CYAN)Cleaning admin dashboard...$(RESET)"
	@cd $(ADMIN_DIR) && rm -rf .next dist build node_modules/.cache{{end}}

.PHONY: clean-shared
clean-shared: ## Clean shared components artifacts
	@echo "$(CYAN)Cleaning shared components...$(RESET)"
	@cd $(SHARED_DIR) && rm -rf dist build node_modules/.cache

.PHONY: clean-deps
clean-deps: ## Remove all node_modules
	@echo "$(YELLOW)Removing all node_modules...$(RESET)"
{{if .Components.Frontend.MainApp}}	@rm -rf $(APP_DIR)/node_modules{{end}}
{{if .Components.Frontend.Home}}	@rm -rf $(HOME_DIR)/node_modules{{end}}
{{if .Components.Frontend.Admin}}	@rm -rf $(ADMIN_DIR)/node_modules{{end}}
	@rm -rf $(SHARED_DIR)/node_modules
	@echo "$(GREEN)✅ All node_modules removed$(RESET)"

##@ Docker

.PHONY: docker-build
docker-build: ## Build all frontend Docker images
	@echo "$(BLUE)Building all frontend Docker images...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) docker-build-app{{end}}
{{if .Components.Frontend.Home}}	@$(MAKE) docker-build-home{{end}}
{{if .Components.Frontend.Admin}}	@$(MAKE) docker-build-admin{{end}}

{{if .Components.Frontend.MainApp}}.PHONY: docker-build-app
docker-build-app: ## Build main application Docker image
	@echo "$(CYAN)Building main application Docker image...$(RESET)"
	@cd $(APP_DIR) && docker build -t {{.Organization}}/{{.Name}}-app:latest .{{end}}

{{if .Components.Frontend.Home}}.PHONY: docker-build-home
docker-build-home: ## Build home page Docker image
	@echo "$(CYAN)Building home page Docker image...$(RESET)"
	@cd $(HOME_DIR) && docker build -t {{.Organization}}/{{.Name}}-home:latest .{{end}}

{{if .Components.Frontend.Admin}}.PHONY: docker-build-admin
docker-build-admin: ## Build admin dashboard Docker image
	@echo "$(CYAN)Building admin dashboard Docker image...$(RESET)"
	@cd $(ADMIN_DIR) && docker build -t {{.Organization}}/{{.Name}}-admin:latest .{{end}}

##@ Information

.PHONY: status
status: ## Show frontend project status
	@echo "$(CYAN)Frontend Project Status$(RESET)"
	@echo ""
{{if .Components.Frontend.MainApp}}	@echo "$(YELLOW)Main Application ($(APP_DIR)):$(RESET)"
	@if [ -d "$(APP_DIR)" ]; then \
		echo "  ✅ Directory exists"; \
		if [ -f "$(APP_DIR)/package.json" ]; then \
			echo "  ✅ package.json found"; \
			echo "  📦 Version: $$(cd $(APP_DIR) && node -p "require('./package.json').version")"; \
		else \
			echo "  ❌ package.json not found"; \
		fi; \
		if [ -d "$(APP_DIR)/node_modules" ]; then \
			echo "  ✅ Dependencies installed"; \
		else \
			echo "  ❌ Dependencies not installed"; \
		fi; \
	else \
		echo "  ❌ Directory not found"; \
	fi
	@echo ""{{end}}
{{if .Components.Frontend.Home}}	@echo "$(YELLOW)Home Page ($(HOME_DIR)):$(RESET)"
	@if [ -d "$(HOME_DIR)" ]; then \
		echo "  ✅ Directory exists"; \
		if [ -f "$(HOME_DIR)/package.json" ]; then \
			echo "  ✅ package.json found"; \
			echo "  📦 Version: $$(cd $(HOME_DIR) && node -p "require('./package.json').version")"; \
		else \
			echo "  ❌ package.json not found"; \
		fi; \
		if [ -d "$(HOME_DIR)/node_modules" ]; then \
			echo "  ✅ Dependencies installed"; \
		else \
			echo "  ❌ Dependencies not installed"; \
		fi; \
	else \
		echo "  ❌ Directory not found"; \
	fi
	@echo ""{{end}}
{{if .Components.Frontend.Admin}}	@echo "$(YELLOW)Admin Dashboard ($(ADMIN_DIR)):$(RESET)"
	@if [ -d "$(ADMIN_DIR)" ]; then \
		echo "  ✅ Directory exists"; \
		if [ -f "$(ADMIN_DIR)/package.json" ]; then \
			echo "  ✅ package.json found"; \
			echo "  📦 Version: $$(cd $(ADMIN_DIR) && node -p "require('./package.json').version")"; \
		else \
			echo "  ❌ package.json not found"; \
		fi; \
		if [ -d "$(ADMIN_DIR)/node_modules" ]; then \
			echo "  ✅ Dependencies installed"; \
		else \
			echo "  ❌ Dependencies not installed"; \
		fi; \
	else \
		echo "  ❌ Directory not found"; \
	fi
	@echo ""{{end}}
	@echo "$(YELLOW)Shared Components ($(SHARED_DIR)):$(RESET)"
	@if [ -d "$(SHARED_DIR)" ]; then \
		echo "  ✅ Directory exists"; \
		if [ -f "$(SHARED_DIR)/package.json" ]; then \
			echo "  ✅ package.json found"; \
			echo "  📦 Version: $$(cd $(SHARED_DIR) && node -p "require('./package.json').version")"; \
		else \
			echo "  ❌ package.json not found"; \
		fi; \
		if [ -d "$(SHARED_DIR)/node_modules" ]; then \
			echo "  ✅ Dependencies installed"; \
		else \
			echo "  ❌ Dependencies not installed"; \
		fi; \
	else \
		echo "  ❌ Directory not found"; \
	fi

.PHONY: urls
urls: ## Show development URLs
	@echo "$(CYAN)Frontend Development URLs$(RESET)"
{{if .Components.Frontend.MainApp}}	@echo "  🌐 Main App: http://localhost:3000"{{end}}
{{if .Components.Frontend.Home}}	@echo "  🏠 Home Page: http://localhost:3001"{{end}}
{{if .Components.Frontend.Admin}}	@echo "  ⚙️  Admin Dashboard: http://localhost:3002"{{end}}

# Include component-specific Makefiles if they exist
{{if .Components.Frontend.MainApp}}-include $(APP_DIR)/Makefile{{end}}
{{if .Components.Frontend.Home}}-include $(HOME_DIR)/Makefile{{end}}
{{if .Components.Frontend.Admin}}-include $(ADMIN_DIR)/Makefile{{end}}
-include $(SHARED_DIR)/Makefile