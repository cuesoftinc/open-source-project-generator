name: Deploy to Staging

on:
  push:
    branches: [ develop ]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      {{if .Components.Frontend.MainApp}}app-image: ${{ steps.meta-app.outputs.tags }}{{end}}
      {{if .Components.Frontend.Home}}home-image: ${{ steps.meta-home.outputs.tags }}{{end}}
      {{if .Components.Frontend.Admin}}admin-image: ${{ steps.meta-admin.outputs.tags }}{{end}}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Build and push API image
    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=staging

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./CommonServer/Dockerfile
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    {{if .Components.Frontend.MainApp}}
    # Build and push App image
    - name: Extract metadata for App
      id: meta-app
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-app
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=staging

    - name: Build and push App image
      uses: docker/build-push-action@v5
      with:
        context: ./App
        file: ./App/Dockerfile
        push: true
        tags: ${{ steps.meta-app.outputs.tags }}
        labels: ${{ steps.meta-app.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    {{end}}

    {{if .Components.Frontend.Home}}
    # Build and push Home image
    - name: Extract metadata for Home
      id: meta-home
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-home
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=staging

    - name: Build and push Home image
      uses: docker/build-push-action@v5
      with:
        context: ./Home
        file: ./Home/Dockerfile
        push: true
        tags: ${{ steps.meta-home.outputs.tags }}
        labels: ${{ steps.meta-home.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    {{end}}

    {{if .Components.Frontend.Admin}}
    # Build and push Admin image
    - name: Extract metadata for Admin
      id: meta-admin
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-admin
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=staging

    - name: Build and push Admin image
      uses: docker/build-push-action@v5
      with:
        context: ./Admin
        file: ./Admin/Dockerfile
        push: true
        tags: ${{ steps.meta-admin.outputs.tags }}
        labels: ${{ steps.meta-admin.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    {{end}}

  deploy-to-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.STAGING_KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        
        # Update image tags in deployment manifests
        sed -i "s|{{.Organization}}/{{.Name | lower}}-api:.*|${{ needs.build-and-push.outputs.api-image }}|g" Deploy/k8s/staging/api-deployment.yaml
        {{if .Components.Frontend.MainApp}}sed -i "s|{{.Organization}}/{{.Name | lower}}-app:.*|${{ needs.build-and-push.outputs.app-image }}|g" Deploy/k8s/staging/app-deployment.yaml{{end}}
        {{if .Components.Frontend.Home}}sed -i "s|{{.Organization}}/{{.Name | lower}}-home:.*|${{ needs.build-and-push.outputs.home-image }}|g" Deploy/k8s/staging/home-deployment.yaml{{end}}
        {{if .Components.Frontend.Admin}}sed -i "s|{{.Organization}}/{{.Name | lower}}-admin:.*|${{ needs.build-and-push.outputs.admin-image }}|g" Deploy/k8s/staging/admin-deployment.yaml{{end}}
        
        # Apply Kubernetes manifests
        kubectl apply -f Deploy/k8s/staging/namespace.yaml
        kubectl apply -f Deploy/k8s/staging/configmap.yaml
        kubectl apply -f Deploy/k8s/staging/secret.yaml
        kubectl apply -f Deploy/k8s/staging/
        
        # Wait for rollout to complete
        kubectl rollout status deployment/{{.Name | lower}}-api -n {{.Name | lower}}-staging --timeout=300s
        {{if .Components.Frontend.MainApp}}kubectl rollout status deployment/{{.Name | lower}}-app -n {{.Name | lower}}-staging --timeout=300s{{end}}
        {{if .Components.Frontend.Home}}kubectl rollout status deployment/{{.Name | lower}}-home -n {{.Name | lower}}-staging --timeout=300s{{end}}
        {{if .Components.Frontend.Admin}}kubectl rollout status deployment/{{.Name | lower}}-admin -n {{.Name | lower}}-staging --timeout=300s{{end}}

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        
        # Get service URLs
        API_URL=$(kubectl get service {{.Name | lower}}-api -n {{.Name | lower}}-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        {{if .Components.Frontend.MainApp}}APP_URL=$(kubectl get service {{.Name | lower}}-app -n {{.Name | lower}}-staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}'){{end}}
        
        # Wait for services to be ready
        sleep 30
        
        # Run basic health checks
        curl -f http://$API_URL/health || exit 1
        {{if .Components.Frontend.MainApp}}curl -f http://$APP_URL/ || exit 1{{end}}

    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  run-e2e-tests:
    runs-on: ubuntu-latest
    needs: deploy-to-staging
    if: success()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '{{.Versions.Node}}'

    - name: Install E2E test dependencies
      run: |
        cd Tests/e2e
        npm ci

    - name: Run E2E tests against staging
      env:
        BASE_URL: ${{ secrets.STAGING_BASE_URL }}
        API_URL: ${{ secrets.STAGING_API_URL }}
      run: |
        cd Tests/e2e
        npm run test:staging

    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: Tests/e2e/test-results/