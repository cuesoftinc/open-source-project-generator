name: Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy (e.g., v1.0.0)'
        required: true
        type: string
      skip_tests:
        description: 'Skip tests before deployment'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Deploying version: $VERSION"

    - name: Validate version format
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format: $VERSION"
          echo "Expected format: v1.0.0"
          exit 1
        fi

  security-check:
    runs-on: ubuntu-latest
    needs: validate-release
    if: ${{ !github.event.inputs.skip_tests }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run security scan
      uses: ./.github/workflows/security-scan.yml

  build-and-push-production:
    runs-on: ubuntu-latest
    needs: [validate-release, security-check]
    if: always() && (needs.security-check.result == 'success' || needs.security-check.result == 'skipped')
    permissions:
      contents: read
      packages: write
    
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      {{if .Components.Frontend.MainApp}}app-image: ${{ steps.meta-app.outputs.tags }}{{end}}
      {{if .Components.Frontend.Home}}home-image: ${{ steps.meta-home.outputs.tags }}{{end}}
      {{if .Components.Frontend.Admin}}admin-image: ${{ steps.meta-admin.outputs.tags }}{{end}}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Build and push API image
    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
        tags: |
          type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
          type=raw,value=latest
          type=raw,value=production

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./CommonServer/Dockerfile
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    {{if .Components.Frontend.MainApp}}
    # Build and push App image
    - name: Extract metadata for App
      id: meta-app
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-app
        tags: |
          type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
          type=raw,value=latest
          type=raw,value=production

    - name: Build and push App image
      uses: docker/build-push-action@v5
      with:
        context: ./App
        file: ./App/Dockerfile
        push: true
        tags: ${{ steps.meta-app.outputs.tags }}
        labels: ${{ steps.meta-app.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    {{end}}

    {{if .Components.Frontend.Home}}
    # Build and push Home image
    - name: Extract metadata for Home
      id: meta-home
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-home
        tags: |
          type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
          type=raw,value=latest
          type=raw,value=production

    - name: Build and push Home image
      uses: docker/build-push-action@v5
      with:
        context: ./Home
        file: ./Home/Dockerfile
        push: true
        tags: ${{ steps.meta-home.outputs.tags }}
        labels: ${{ steps.meta-home.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    {{end}}

    {{if .Components.Frontend.Admin}}
    # Build and push Admin image
    - name: Extract metadata for Admin
      id: meta-admin
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-admin
        tags: |
          type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
          type=raw,value=latest
          type=raw,value=production

    - name: Build and push Admin image
      uses: docker/build-push-action@v5
      with:
        context: ./Admin
        file: ./Admin/Dockerfile
        push: true
        tags: ${{ steps.meta-admin.outputs.tags }}
        labels: ${{ steps.meta-admin.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
    {{end}}

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: [validate-release, build-and-push-production]
    environment: 
      name: production
      url: https://{{.Name | lower}}.{{.Organization}}.com
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Create backup
      run: |
        export KUBECONFIG=kubeconfig
        
        # Create database backup
        kubectl exec -n {{.Name | lower}}-production deployment/postgres -- pg_dump -U postgres {{.Name | lower}}_production > backup-$(date +%Y%m%d-%H%M%S).sql
        
        # Store backup in cloud storage
        aws s3 cp backup-*.sql s3://${{ secrets.BACKUP_BUCKET }}/production/

    - name: Deploy to Kubernetes
      run: |
        export KUBECONFIG=kubeconfig
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Update image tags in deployment manifests
        sed -i "s|{{.Organization}}/{{.Name | lower}}-api:.*|${{ needs.build-and-push-production.outputs.api-image }}|g" Deploy/k8s/production/api-deployment.yaml
        {{if .Components.Frontend.MainApp}}sed -i "s|{{.Organization}}/{{.Name | lower}}-app:.*|${{ needs.build-and-push-production.outputs.app-image }}|g" Deploy/k8s/production/app-deployment.yaml{{end}}
        {{if .Components.Frontend.Home}}sed -i "s|{{.Organization}}/{{.Name | lower}}-home:.*|${{ needs.build-and-push-production.outputs.home-image }}|g" Deploy/k8s/production/home-deployment.yaml{{end}}
        {{if .Components.Frontend.Admin}}sed -i "s|{{.Organization}}/{{.Name | lower}}-admin:.*|${{ needs.build-and-push-production.outputs.admin-image }}|g" Deploy/k8s/production/admin-deployment.yaml{{end}}
        
        # Apply Kubernetes manifests
        kubectl apply -f Deploy/k8s/production/
        
        # Wait for rollout to complete
        kubectl rollout status deployment/{{.Name | lower}}-api -n {{.Name | lower}}-production --timeout=600s
        {{if .Components.Frontend.MainApp}}kubectl rollout status deployment/{{.Name | lower}}-app -n {{.Name | lower}}-production --timeout=600s{{end}}
        {{if .Components.Frontend.Home}}kubectl rollout status deployment/{{.Name | lower}}-home -n {{.Name | lower}}-production --timeout=600s{{end}}
        {{if .Components.Frontend.Admin}}kubectl rollout status deployment/{{.Name | lower}}-admin -n {{.Name | lower}}-production --timeout=600s{{end}}

    - name: Run production health checks
      run: |
        export KUBECONFIG=kubeconfig
        
        # Wait for services to be ready
        sleep 60
        
        # Run comprehensive health checks
        API_URL="https://api.{{.Name | lower}}.{{.Organization}}.com"
        {{if .Components.Frontend.MainApp}}APP_URL="https://{{.Name | lower}}.{{.Organization}}.com"{{end}}
        {{if .Components.Frontend.Home}}HOME_URL="https://home.{{.Name | lower}}.{{.Organization}}.com"{{end}}
        {{if .Components.Frontend.Admin}}ADMIN_URL="https://admin.{{.Name | lower}}.{{.Organization}}.com"{{end}}
        
        # API health check
        curl -f $API_URL/health || exit 1
        curl -f $API_URL/metrics || exit 1
        
        {{if .Components.Frontend.MainApp}}
        # App health check
        curl -f $APP_URL/ || exit 1
        {{end}}
        
        {{if .Components.Frontend.Home}}
        # Home health check
        curl -f $HOME_URL/ || exit 1
        {{end}}
        
        {{if .Components.Frontend.Admin}}
        # Admin health check
        curl -f $ADMIN_URL/ || exit 1
        {{end}}

    - name: Update release notes
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        generate_release_notes: true
        make_latest: true

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "text": "🚀 Production deployment successful!",
            "attachments": [{
              "color": "good",
              "fields": [{
                "title": "Version",
                "value": "${{ needs.validate-release.outputs.version }}",
                "short": true
              }, {
                "title": "Environment",
                "value": "Production",
                "short": true
              }]
            }]
          }

  rollback:
    runs-on: ubuntu-latest
    needs: [validate-release, deploy-to-production]
    if: failure()
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.PRODUCTION_KUBECONFIG }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Rollback deployment
      run: |
        export KUBECONFIG=kubeconfig
        
        # Rollback to previous version
        kubectl rollout undo deployment/{{.Name | lower}}-api -n {{.Name | lower}}-production
        {{if .Components.Frontend.MainApp}}kubectl rollout undo deployment/{{.Name | lower}}-app -n {{.Name | lower}}-production{{end}}
        {{if .Components.Frontend.Home}}kubectl rollout undo deployment/{{.Name | lower}}-home -n {{.Name | lower}}-production{{end}}
        {{if .Components.Frontend.Admin}}kubectl rollout undo deployment/{{.Name | lower}}-admin -n {{.Name | lower}}-production{{end}}
        
        # Wait for rollback to complete
        kubectl rollout status deployment/{{.Name | lower}}-api -n {{.Name | lower}}-production --timeout=300s
        {{if .Components.Frontend.MainApp}}kubectl rollout status deployment/{{.Name | lower}}-app -n {{.Name | lower}}-production --timeout=300s{{end}}
        {{if .Components.Frontend.Home}}kubectl rollout status deployment/{{.Name | lower}}-home -n {{.Name | lower}}-production --timeout=300s{{end}}
        {{if .Components.Frontend.Admin}}kubectl rollout status deployment/{{.Name | lower}}-admin -n {{.Name | lower}}-production --timeout=300s{{end}}

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            "text": "⚠️ Production deployment failed - Rollback completed",
            "attachments": [{
              "color": "danger",
              "fields": [{
                "title": "Failed Version",
                "value": "${{ needs.validate-release.outputs.version }}",
                "short": true
              }, {
                "title": "Environment",
                "value": "Production",
                "short": true
              }]
            }]
          }