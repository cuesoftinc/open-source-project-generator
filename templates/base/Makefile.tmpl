# {{.Name}} - Development and Deployment Makefile
# This Makefile provides commands for development, testing, building, and deployment

# Colors for output
RED := \033[31m
GREEN := \033[32m
YELLOW := \033[33m
BLUE := \033[34m
MAGENTA := \033[35m
CYAN := \033[36m
WHITE := \033[37m
RESET := \033[0m

# Project configuration
PROJECT_NAME := {{.Name}}
VERSION := $(shell git describe --tags --always --dirty 2>/dev/null || echo "dev")
BUILD_TIME := $(shell date -u +"%Y-%m-%dT%H:%M:%SZ")
GIT_COMMIT := $(shell git rev-parse --short HEAD 2>/dev/null || echo "unknown")

# Environment configuration
NODE_VERSION := {{.Versions.Node}}
GO_VERSION := {{.Versions.Go}}
DOCKER_REGISTRY := {{.Organization}}
NAMESPACE := {{.Name}}

# Directories
{{if .Components.Frontend.MainApp}}FRONTEND_DIRS := App{{if .Components.Frontend.Home}} Home{{end}}{{if .Components.Frontend.Admin}} Admin{{end}}{{end}}
{{if .Components.Backend.API}}BACKEND_DIR := CommonServer{{end}}
{{if or .Components.Mobile.Android .Components.Mobile.iOS}}MOBILE_DIR := Mobile{{end}}
DOCS_DIR := Docs
SCRIPTS_DIR := Scripts
DEPLOY_DIR := Deploy

# Default target
.DEFAULT_GOAL := help

##@ Help

.PHONY: help
help: ## Display this help message
	@echo "$(CYAN){{.Name}} - Development and Deployment Commands$(RESET)"
	@echo ""
	@echo "$(YELLOW)Usage:$(RESET)"
	@echo "  make <target>"
	@echo ""
	@awk 'BEGIN {FS = ":.*##"; printf "$(YELLOW)Available targets:$(RESET)\n"} /^[a-zA-Z_0-9-]+:.*?##/ { printf "  $(CYAN)%-20s$(RESET) %s\n", $$1, $$2 } /^##@/ { printf "\n$(MAGENTA)%s$(RESET)\n", substr($$0, 5) } ' $(MAKEFILE_LIST)

##@ Setup and Installation

.PHONY: setup
setup: ## Set up the complete development environment
	@echo "$(GREEN)Setting up {{.Name}} development environment...$(RESET)"
	@$(MAKE) check-prerequisites
	@$(MAKE) install-deps
	@$(MAKE) setup-env
	@$(MAKE) setup-db
	@$(MAKE) validate-setup
	@echo "$(GREEN)✅ Setup complete! Run 'make dev' to start development.$(RESET)"

.PHONY: check-prerequisites
check-prerequisites: ## Check if required tools are installed
	@echo "$(BLUE)Checking prerequisites...$(RESET)"
{{if .Components.Frontend.MainApp}}	@command -v node >/dev/null 2>&1 || { echo "$(RED)❌ Node.js is required but not installed.$(RESET)"; exit 1; }
	@command -v npm >/dev/null 2>&1 || { echo "$(RED)❌ npm is required but not installed.$(RESET)"; exit 1; }
	@echo "$(GREEN)✅ Node.js $(shell node --version)$(RESET)"{{end}}
{{if .Components.Backend.API}}	@command -v go >/dev/null 2>&1 || { echo "$(RED)❌ Go is required but not installed.$(RESET)"; exit 1; }
	@echo "$(GREEN)✅ Go $(shell go version | cut -d' ' -f3)$(RESET)"{{end}}
{{if .Components.Infrastructure.Docker}}	@command -v docker >/dev/null 2>&1 || { echo "$(RED)❌ Docker is required but not installed.$(RESET)"; exit 1; }
	@echo "$(GREEN)✅ Docker $(shell docker --version | cut -d' ' -f3 | tr -d ',')$(RESET)"{{end}}
	@command -v git >/dev/null 2>&1 || { echo "$(RED)❌ Git is required but not installed.$(RESET)"; exit 1; }
	@echo "$(GREEN)✅ Git $(shell git --version | cut -d' ' -f3)$(RESET)"
	@command -v make >/dev/null 2>&1 || { echo "$(RED)❌ Make is required but not installed.$(RESET)"; exit 1; }
	@echo "$(GREEN)✅ Make $(shell make --version | head -n1 | cut -d' ' -f3)$(RESET)"

.PHONY: install-deps
install-deps: ## Install all project dependencies
	@echo "$(BLUE)Installing dependencies...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) install-frontend-deps{{end}}
{{if .Components.Backend.API}}	@$(MAKE) install-backend-deps{{end}}
{{if or .Components.Mobile.Android .Components.Mobile.iOS}}	@$(MAKE) install-mobile-deps{{end}}

{{if .Components.Frontend.MainApp}}.PHONY: install-frontend-deps
install-frontend-deps: ## Install frontend dependencies
	@echo "$(BLUE)Installing frontend dependencies...$(RESET)"
{{range $dir := split .Components.Frontend.MainApp "App Home Admin"}}{{if $dir}}	@if [ -d "{{$dir}}" ]; then \
		echo "$(CYAN)Installing dependencies for {{$dir}}...$(RESET)"; \
		cd {{$dir}} && npm ci; \
	fi
{{end}}{{end}}{{end}}

{{if .Components.Backend.API}}.PHONY: install-backend-deps
install-backend-deps: ## Install backend dependencies
	@echo "$(BLUE)Installing backend dependencies...$(RESET)"
	@cd $(BACKEND_DIR) && go mod download && go mod tidy{{end}}

{{if or .Components.Mobile.Android .Components.Mobile.iOS}}.PHONY: install-mobile-deps
install-mobile-deps: ## Install mobile dependencies
	@echo "$(BLUE)Installing mobile dependencies...$(RESET)"
{{if .Components.Mobile.Android}}	@if [ -d "$(MOBILE_DIR)/Android" ]; then \
		echo "$(CYAN)Installing Android dependencies...$(RESET)"; \
		cd $(MOBILE_DIR)/Android && ./gradlew build --no-daemon; \
	fi{{end}}
{{if .Components.Mobile.iOS}}	@if [ -d "$(MOBILE_DIR)/iOS" ]; then \
		echo "$(CYAN)Installing iOS dependencies...$(RESET)"; \
		cd $(MOBILE_DIR)/iOS && pod install; \
	fi{{end}}{{end}}

.PHONY: setup-env
setup-env: ## Set up environment files
	@echo "$(BLUE)Setting up environment files...$(RESET)"
	@if [ ! -f .env.local ]; then \
		cp .env.example .env.local; \
		echo "$(GREEN)✅ Created .env.local from .env.example$(RESET)"; \
	else \
		echo "$(YELLOW)⚠️  .env.local already exists$(RESET)"; \
	fi
{{if .Components.Backend.API}}	@if [ ! -f $(BACKEND_DIR)/.env ]; then \
		cp $(BACKEND_DIR)/.env.example $(BACKEND_DIR)/.env; \
		echo "$(GREEN)✅ Created $(BACKEND_DIR)/.env from example$(RESET)"; \
	else \
		echo "$(YELLOW)⚠️  $(BACKEND_DIR)/.env already exists$(RESET)"; \
	fi{{end}}

.PHONY: setup-db
setup-db: ## Set up database and run migrations
	@echo "$(BLUE)Setting up database...$(RESET)"
{{if .Components.Infrastructure.Docker}}	@$(MAKE) docker-db-up{{end}}
{{if .Components.Backend.API}}	@sleep 5  # Wait for database to be ready
	@$(MAKE) db-migrate
	@echo "$(GREEN)✅ Database setup complete$(RESET)"{{end}}

.PHONY: validate-setup
validate-setup: ## Validate that setup was successful
	@echo "$(BLUE)Validating setup...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) validate-frontend{{end}}
{{if .Components.Backend.API}}	@$(MAKE) validate-backend{{end}}
	@echo "$(GREEN)✅ Setup validation complete$(RESET)"

{{if .Components.Frontend.MainApp}}.PHONY: validate-frontend
validate-frontend: ## Validate frontend setup
{{range $dir := split .Components.Frontend.MainApp "App Home Admin"}}{{if $dir}}	@if [ -d "{{$dir}}" ]; then \
		echo "$(CYAN)Validating {{$dir}}...$(RESET)"; \
		cd {{$dir}} && npm run build --silent; \
	fi
{{end}}{{end}}{{end}}

{{if .Components.Backend.API}}.PHONY: validate-backend
validate-backend: ## Validate backend setup
	@echo "$(CYAN)Validating backend...$(RESET)"
	@cd $(BACKEND_DIR) && go build -o /tmp/{{.Name}}-test ./... && rm -f /tmp/{{.Name}}-test{{end}}

##@ Development

.PHONY: dev
dev: ## Start all development services
	@echo "$(GREEN)Starting {{.Name}} development environment...$(RESET)"
{{if .Components.Infrastructure.Docker}}	@$(MAKE) docker-dev-up{{else}}	@$(MAKE) start-services{{end}}

.PHONY: start-services
start-services: ## Start all services without Docker
	@echo "$(BLUE)Starting services...$(RESET)"
{{if .Components.Backend.API}}	@$(MAKE) start-db &{{end}}
{{if .Components.Frontend.MainApp}}	@$(MAKE) dev-frontend &{{end}}
{{if .Components.Backend.API}}	@$(MAKE) dev-backend &{{end}}
	@echo "$(GREEN)✅ All services started$(RESET)"
	@echo "$(CYAN)Press Ctrl+C to stop all services$(RESET)"
	@wait

{{if .Components.Frontend.MainApp}}.PHONY: dev-frontend
dev-frontend: ## Start frontend development servers
	@echo "$(BLUE)Starting frontend development servers...$(RESET)"
{{if .Components.Frontend.MainApp}}	@cd App && npm run dev &{{end}}
{{if .Components.Frontend.Home}}	@cd Home && npm run dev &{{end}}
{{if .Components.Frontend.Admin}}	@cd Admin && npm run dev &{{end}}
	@wait{{end}}

{{if .Components.Backend.API}}.PHONY: dev-backend
dev-backend: ## Start backend development server
	@echo "$(BLUE)Starting backend development server...$(RESET)"
	@cd $(BACKEND_DIR) && go run main.go{{end}}

{{if .Components.Backend.API}}.PHONY: start-db
start-db: ## Start database services
	@echo "$(BLUE)Starting database services...$(RESET)"
{{if .Components.Infrastructure.Docker}}	@docker-compose up -d postgres redis{{else}}	@echo "$(YELLOW)⚠️  Please start PostgreSQL and Redis manually$(RESET)"{{end}}{{end}}

.PHONY: stop
stop: ## Stop all development services
	@echo "$(YELLOW)Stopping all services...$(RESET)"
{{if .Components.Infrastructure.Docker}}	@docker-compose down{{end}}
	@pkill -f "npm run dev" || true
	@pkill -f "go run main.go" || true
	@echo "$(GREEN)✅ All services stopped$(RESET)"

.PHONY: restart
restart: stop dev ## Restart all development services

.PHONY: logs
logs: ## Show logs from all services
{{if .Components.Infrastructure.Docker}}	@docker-compose logs -f{{else}}	@echo "$(YELLOW)⚠️  Logs are only available when using Docker$(RESET)"{{end}}

##@ Testing

.PHONY: test
test: ## Run all tests
	@echo "$(BLUE)Running all tests...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) test-frontend{{end}}
{{if .Components.Backend.API}}	@$(MAKE) test-backend{{end}}
{{if or .Components.Mobile.Android .Components.Mobile.iOS}}	@$(MAKE) test-mobile{{end}}
	@echo "$(GREEN)✅ All tests completed$(RESET)"

{{if .Components.Frontend.MainApp}}.PHONY: test-frontend
test-frontend: ## Run frontend tests
	@echo "$(BLUE)Running frontend tests...$(RESET)"
{{range $dir := split .Components.Frontend.MainApp "App Home Admin"}}{{if $dir}}	@if [ -d "{{$dir}}" ]; then \
		echo "$(CYAN)Testing {{$dir}}...$(RESET)"; \
		cd {{$dir}} && npm test -- --run; \
	fi
{{end}}{{end}}{{end}}

{{if .Components.Backend.API}}.PHONY: test-backend
test-backend: ## Run backend tests
	@echo "$(BLUE)Running backend tests...$(RESET)"
	@cd $(BACKEND_DIR) && go test -v ./...{{end}}

{{if or .Components.Mobile.Android .Components.Mobile.iOS}}.PHONY: test-mobile
test-mobile: ## Run mobile tests
	@echo "$(BLUE)Running mobile tests...$(RESET)"
{{if .Components.Mobile.Android}}	@if [ -d "$(MOBILE_DIR)/Android" ]; then \
		echo "$(CYAN)Testing Android...$(RESET)"; \
		cd $(MOBILE_DIR)/Android && ./gradlew test; \
	fi{{end}}
{{if .Components.Mobile.iOS}}	@if [ -d "$(MOBILE_DIR)/iOS" ]; then \
		echo "$(CYAN)Testing iOS...$(RESET)"; \
		cd $(MOBILE_DIR)/iOS && xcodebuild test -scheme {{.Name}} -destination 'platform=iOS Simulator,name=iPhone 14'; \
	fi{{end}}{{end}}

.PHONY: test-watch
test-watch: ## Run tests in watch mode
	@echo "$(BLUE)Running tests in watch mode...$(RESET)"
{{if .Components.Frontend.MainApp}}	@cd App && npm test{{end}}

.PHONY: test-coverage
test-coverage: ## Run tests with coverage report
	@echo "$(BLUE)Running tests with coverage...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) test-frontend-coverage{{end}}
{{if .Components.Backend.API}}	@$(MAKE) test-backend-coverage{{end}}

{{if .Components.Frontend.MainApp}}.PHONY: test-frontend-coverage
test-frontend-coverage: ## Run frontend tests with coverage
{{range $dir := split .Components.Frontend.MainApp "App Home Admin"}}{{if $dir}}	@if [ -d "{{$dir}}" ]; then \
		echo "$(CYAN)Testing {{$dir}} with coverage...$(RESET)"; \
		cd {{$dir}} && npm run test:coverage; \
	fi
{{end}}{{end}}{{end}}

{{if .Components.Backend.API}}.PHONY: test-backend-coverage
test-backend-coverage: ## Run backend tests with coverage
	@echo "$(CYAN)Testing backend with coverage...$(RESET)"
	@cd $(BACKEND_DIR) && go test -v -coverprofile=coverage.out ./...
	@cd $(BACKEND_DIR) && go tool cover -html=coverage.out -o coverage.html
	@echo "$(GREEN)✅ Coverage report generated: $(BACKEND_DIR)/coverage.html$(RESET)"{{end}}

.PHONY: test-integration
test-integration: ## Run integration tests
	@echo "$(BLUE)Running integration tests...$(RESET)"
{{if .Components.Backend.API}}	@cd $(BACKEND_DIR) && go test -tags=integration -v ./...{{end}}
{{if .Components.Frontend.MainApp}}	@cd App && npm run test:integration{{end}}

.PHONY: test-e2e
test-e2e: ## Run end-to-end tests
	@echo "$(BLUE)Running end-to-end tests...$(RESET)"
{{if .Components.Frontend.MainApp}}	@cd App && npm run test:e2e{{end}}

##@ Code Quality

.PHONY: lint
lint: ## Run linting on all code
	@echo "$(BLUE)Running linters...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) lint-frontend{{end}}
{{if .Components.Backend.API}}	@$(MAKE) lint-backend{{end}}
	@echo "$(GREEN)✅ Linting completed$(RESET)"

{{if .Components.Frontend.MainApp}}.PHONY: lint-frontend
lint-frontend: ## Run frontend linting
	@echo "$(CYAN)Linting frontend...$(RESET)"
{{range $dir := split .Components.Frontend.MainApp "App Home Admin"}}{{if $dir}}	@if [ -d "{{$dir}}" ]; then \
		echo "$(CYAN)Linting {{$dir}}...$(RESET)"; \
		cd {{$dir}} && npm run lint; \
	fi
{{end}}{{end}}{{end}}

{{if .Components.Backend.API}}.PHONY: lint-backend
lint-backend: ## Run backend linting
	@echo "$(CYAN)Linting backend...$(RESET)"
	@cd $(BACKEND_DIR) && golangci-lint run{{end}}

.PHONY: format
format: ## Format all code
	@echo "$(BLUE)Formatting code...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) format-frontend{{end}}
{{if .Components.Backend.API}}	@$(MAKE) format-backend{{end}}
	@echo "$(GREEN)✅ Code formatting completed$(RESET)"

{{if .Components.Frontend.MainApp}}.PHONY: format-frontend
format-frontend: ## Format frontend code
	@echo "$(CYAN)Formatting frontend...$(RESET)"
{{range $dir := split .Components.Frontend.MainApp "App Home Admin"}}{{if $dir}}	@if [ -d "{{$dir}}" ]; then \
		echo "$(CYAN)Formatting {{$dir}}...$(RESET)"; \
		cd {{$dir}} && npm run format; \
	fi
{{end}}{{end}}{{end}}

{{if .Components.Backend.API}}.PHONY: format-backend
format-backend: ## Format backend code
	@echo "$(CYAN)Formatting backend...$(RESET)"
	@cd $(BACKEND_DIR) && go fmt ./...
	@cd $(BACKEND_DIR) && goimports -w .{{end}}

.PHONY: typecheck
typecheck: ## Run type checking
	@echo "$(BLUE)Running type checking...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) typecheck-frontend{{end}}
{{if .Components.Backend.API}}	@$(MAKE) typecheck-backend{{end}}

{{if .Components.Frontend.MainApp}}.PHONY: typecheck-frontend
typecheck-frontend: ## Run frontend type checking
{{range $dir := split .Components.Frontend.MainApp "App Home Admin"}}{{if $dir}}	@if [ -d "{{$dir}}" ]; then \
		echo "$(CYAN)Type checking {{$dir}}...$(RESET)"; \
		cd {{$dir}} && npm run typecheck; \
	fi
{{end}}{{end}}{{end}}

{{if .Components.Backend.API}}.PHONY: typecheck-backend
typecheck-backend: ## Run backend type checking
	@echo "$(CYAN)Type checking backend...$(RESET)"
	@cd $(BACKEND_DIR) && go vet ./...{{end}}

##@ Building

.PHONY: build
build: ## Build all applications
	@echo "$(BLUE)Building all applications...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) build-frontend{{end}}
{{if .Components.Backend.API}}	@$(MAKE) build-backend{{end}}
	@echo "$(GREEN)✅ Build completed$(RESET)"

{{if .Components.Frontend.MainApp}}.PHONY: build-frontend
build-frontend: ## Build frontend applications
	@echo "$(CYAN)Building frontend applications...$(RESET)"
{{range $dir := split .Components.Frontend.MainApp "App Home Admin"}}{{if $dir}}	@if [ -d "{{$dir}}" ]; then \
		echo "$(CYAN)Building {{$dir}}...$(RESET)"; \
		cd {{$dir}} && npm run build; \
	fi
{{end}}{{end}}{{end}}

{{if .Components.Backend.API}}.PHONY: build-backend
build-backend: ## Build backend application
	@echo "$(CYAN)Building backend application...$(RESET)"
	@cd $(BACKEND_DIR) && go build -ldflags="-X main.Version=$(VERSION) -X main.BuildTime=$(BUILD_TIME) -X main.GitCommit=$(GIT_COMMIT)" -o bin/{{.Name}} .{{end}}

{{if or .Components.Mobile.Android .Components.Mobile.iOS}}.PHONY: build-mobile
build-mobile: ## Build mobile applications
	@echo "$(CYAN)Building mobile applications...$(RESET)"
{{if .Components.Mobile.Android}}	@if [ -d "$(MOBILE_DIR)/Android" ]; then \
		echo "$(CYAN)Building Android...$(RESET)"; \
		cd $(MOBILE_DIR)/Android && ./gradlew assembleRelease; \
	fi{{end}}
{{if .Components.Mobile.iOS}}	@if [ -d "$(MOBILE_DIR)/iOS" ]; then \
		echo "$(CYAN)Building iOS...$(RESET)"; \
		cd $(MOBILE_DIR)/iOS && xcodebuild -scheme {{.Name}} -configuration Release archive; \
	fi{{end}}{{end}}

##@ Database

{{if .Components.Backend.API}}.PHONY: db-migrate
db-migrate: ## Run database migrations
	@echo "$(BLUE)Running database migrations...$(RESET)"
	@cd $(BACKEND_DIR) && go run cmd/migrate/main.go up

.PHONY: db-rollback
db-rollback: ## Rollback last database migration
	@echo "$(YELLOW)Rolling back last migration...$(RESET)"
	@cd $(BACKEND_DIR) && go run cmd/migrate/main.go down 1

.PHONY: db-reset
db-reset: ## Reset database (drop and recreate)
	@echo "$(RED)Resetting database...$(RESET)"
	@read -p "Are you sure? This will delete all data. [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		cd $(BACKEND_DIR) && go run cmd/migrate/main.go reset; \
	fi

.PHONY: db-seed
db-seed: ## Seed database with test data
	@echo "$(BLUE)Seeding database...$(RESET)"
	@cd $(BACKEND_DIR) && go run cmd/seed/main.go

.PHONY: db-status
db-status: ## Show database migration status
	@echo "$(BLUE)Database migration status:$(RESET)"
	@cd $(BACKEND_DIR) && go run cmd/migrate/main.go status{{end}}

{{if .Components.Infrastructure.Docker}}##@ Docker

.PHONY: docker-build
docker-build: ## Build all Docker images
	@echo "$(BLUE)Building Docker images...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) docker-build-frontend{{end}}
{{if .Components.Backend.API}}	@$(MAKE) docker-build-backend{{end}}

{{if .Components.Frontend.MainApp}}.PHONY: docker-build-frontend
docker-build-frontend: ## Build frontend Docker images
{{range $dir := split .Components.Frontend.MainApp "App Home Admin"}}{{if $dir}}	@echo "$(CYAN)Building {{$dir}} Docker image...$(RESET)"
	@docker build -t $(DOCKER_REGISTRY)/{{.Name}}-{{$dir | lower}}:$(VERSION) -f {{$dir}}/Dockerfile {{$dir}}/
	@docker tag $(DOCKER_REGISTRY)/{{.Name}}-{{$dir | lower}}:$(VERSION) $(DOCKER_REGISTRY)/{{.Name}}-{{$dir | lower}}:latest
{{end}}{{end}}{{end}}

{{if .Components.Backend.API}}.PHONY: docker-build-backend
docker-build-backend: ## Build backend Docker image
	@echo "$(CYAN)Building backend Docker image...$(RESET)"
	@docker build -t $(DOCKER_REGISTRY)/{{.Name}}-backend:$(VERSION) -f $(BACKEND_DIR)/Dockerfile $(BACKEND_DIR)/
	@docker tag $(DOCKER_REGISTRY)/{{.Name}}-backend:$(VERSION) $(DOCKER_REGISTRY)/{{.Name}}-backend:latest{{end}}

.PHONY: docker-push
docker-push: ## Push Docker images to registry
	@echo "$(BLUE)Pushing Docker images...$(RESET)"
{{if .Components.Frontend.MainApp}}{{range $dir := split .Components.Frontend.MainApp "App Home Admin"}}{{if $dir}}	@docker push $(DOCKER_REGISTRY)/{{.Name}}-{{$dir | lower}}:$(VERSION)
	@docker push $(DOCKER_REGISTRY)/{{.Name}}-{{$dir | lower}}:latest
{{end}}{{end}}{{end}}
{{if .Components.Backend.API}}	@docker push $(DOCKER_REGISTRY)/{{.Name}}-backend:$(VERSION)
	@docker push $(DOCKER_REGISTRY)/{{.Name}}-backend:latest{{end}}

.PHONY: docker-dev-up
docker-dev-up: ## Start development environment with Docker
	@echo "$(BLUE)Starting development environment with Docker...$(RESET)"
	@docker-compose -f docker-compose.dev.yml up --build

.PHONY: docker-up
docker-up: ## Start production environment with Docker
	@echo "$(BLUE)Starting production environment with Docker...$(RESET)"
	@docker-compose up -d

.PHONY: docker-down
docker-down: ## Stop Docker environment
	@echo "$(YELLOW)Stopping Docker environment...$(RESET)"
	@docker-compose down

.PHONY: docker-db-up
docker-db-up: ## Start only database services with Docker
	@echo "$(BLUE)Starting database services with Docker...$(RESET)"
	@docker-compose up -d postgres redis

.PHONY: docker-logs
docker-logs: ## Show Docker logs
	@docker-compose logs -f

.PHONY: docker-clean
docker-clean: ## Clean up Docker resources
	@echo "$(YELLOW)Cleaning up Docker resources...$(RESET)"
	@docker system prune -f
	@docker volume prune -f{{end}}

##@ Deployment

.PHONY: deploy-dev
deploy-dev: ## Deploy to development environment
	@echo "$(BLUE)Deploying to development environment...$(RESET)"
	@$(SCRIPTS_DIR)/deploy.sh dev

.PHONY: deploy-staging
deploy-staging: ## Deploy to staging environment
	@echo "$(BLUE)Deploying to staging environment...$(RESET)"
	@$(SCRIPTS_DIR)/deploy.sh staging

.PHONY: deploy-prod
deploy-prod: ## Deploy to production environment
	@echo "$(RED)Deploying to production environment...$(RESET)"
	@read -p "Are you sure you want to deploy to production? [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		$(SCRIPTS_DIR)/deploy.sh prod; \
	fi

{{if .Components.Infrastructure.Kubernetes}}.PHONY: k8s-deploy
k8s-deploy: ## Deploy to Kubernetes
	@echo "$(BLUE)Deploying to Kubernetes...$(RESET)"
	@kubectl apply -f $(DEPLOY_DIR)/Kubernetes/

.PHONY: k8s-delete
k8s-delete: ## Delete Kubernetes deployment
	@echo "$(YELLOW)Deleting Kubernetes deployment...$(RESET)"
	@kubectl delete -f $(DEPLOY_DIR)/Kubernetes/

.PHONY: helm-install
helm-install: ## Install with Helm
	@echo "$(BLUE)Installing with Helm...$(RESET)"
	@helm install $(PROJECT_NAME) $(DEPLOY_DIR)/Kubernetes/helm/ --namespace $(NAMESPACE) --create-namespace

.PHONY: helm-upgrade
helm-upgrade: ## Upgrade Helm deployment
	@echo "$(BLUE)Upgrading Helm deployment...$(RESET)"
	@helm upgrade $(PROJECT_NAME) $(DEPLOY_DIR)/Kubernetes/helm/ --namespace $(NAMESPACE){{end}}

{{if .Components.Infrastructure.Terraform}}.PHONY: terraform-init
terraform-init: ## Initialize Terraform
	@echo "$(BLUE)Initializing Terraform...$(RESET)"
	@cd $(DEPLOY_DIR)/Terraform && terraform init

.PHONY: terraform-plan
terraform-plan: ## Plan Terraform deployment
	@echo "$(BLUE)Planning Terraform deployment...$(RESET)"
	@cd $(DEPLOY_DIR)/Terraform && terraform plan

.PHONY: terraform-apply
terraform-apply: ## Apply Terraform configuration
	@echo "$(BLUE)Applying Terraform configuration...$(RESET)"
	@cd $(DEPLOY_DIR)/Terraform && terraform apply

.PHONY: terraform-destroy
terraform-destroy: ## Destroy Terraform infrastructure
	@echo "$(RED)Destroying Terraform infrastructure...$(RESET)"
	@read -p "Are you sure? This will destroy all infrastructure. [y/N] " -n 1 -r; \
	echo; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		cd $(DEPLOY_DIR)/Terraform && terraform destroy; \
	fi{{end}}

##@ Maintenance

.PHONY: clean
clean: ## Clean build artifacts and dependencies
	@echo "$(YELLOW)Cleaning build artifacts...$(RESET)"
{{if .Components.Frontend.MainApp}}{{range $dir := split .Components.Frontend.MainApp "App Home Admin"}}{{if $dir}}	@if [ -d "{{$dir}}" ]; then \
		echo "$(CYAN)Cleaning {{$dir}}...$(RESET)"; \
		cd {{$dir}} && rm -rf .next dist build node_modules/.cache; \
	fi
{{end}}{{end}}{{end}}
{{if .Components.Backend.API}}	@if [ -d "$(BACKEND_DIR)" ]; then \
		echo "$(CYAN)Cleaning backend...$(RESET)"; \
		cd $(BACKEND_DIR) && rm -rf bin/ coverage.out coverage.html; \
	fi{{end}}
	@echo "$(GREEN)✅ Cleanup completed$(RESET)"

.PHONY: clean-all
clean-all: clean ## Clean everything including node_modules
	@echo "$(YELLOW)Cleaning all dependencies...$(RESET)"
{{if .Components.Frontend.MainApp}}{{range $dir := split .Components.Frontend.MainApp "App Home Admin"}}{{if $dir}}	@if [ -d "{{$dir}}" ]; then \
		echo "$(CYAN)Removing {{$dir}}/node_modules...$(RESET)"; \
		rm -rf {{$dir}}/node_modules; \
	fi
{{end}}{{end}}{{end}}
{{if .Components.Backend.API}}	@if [ -d "$(BACKEND_DIR)" ]; then \
		echo "$(CYAN)Cleaning Go module cache...$(RESET)"; \
		cd $(BACKEND_DIR) && go clean -modcache; \
	fi{{end}}

.PHONY: update-deps
update-deps: ## Update all dependencies
	@echo "$(BLUE)Updating dependencies...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) update-frontend-deps{{end}}
{{if .Components.Backend.API}}	@$(MAKE) update-backend-deps{{end}}

{{if .Components.Frontend.MainApp}}.PHONY: update-frontend-deps
update-frontend-deps: ## Update frontend dependencies
{{range $dir := split .Components.Frontend.MainApp "App Home Admin"}}{{if $dir}}	@if [ -d "{{$dir}}" ]; then \
		echo "$(CYAN)Updating {{$dir}} dependencies...$(RESET)"; \
		cd {{$dir}} && npm update; \
	fi
{{end}}{{end}}{{end}}

{{if .Components.Backend.API}}.PHONY: update-backend-deps
update-backend-deps: ## Update backend dependencies
	@echo "$(CYAN)Updating backend dependencies...$(RESET)"
	@cd $(BACKEND_DIR) && go get -u ./... && go mod tidy{{end}}

.PHONY: security-scan
security-scan: ## Run security scans
	@echo "$(BLUE)Running security scans...$(RESET)"
{{if .Components.Frontend.MainApp}}	@$(MAKE) security-scan-frontend{{end}}
{{if .Components.Backend.API}}	@$(MAKE) security-scan-backend{{end}}

{{if .Components.Frontend.MainApp}}.PHONY: security-scan-frontend
security-scan-frontend: ## Run frontend security scan
{{range $dir := split .Components.Frontend.MainApp "App Home Admin"}}{{if $dir}}	@if [ -d "{{$dir}}" ]; then \
		echo "$(CYAN)Scanning {{$dir}} for vulnerabilities...$(RESET)"; \
		cd {{$dir}} && npm audit; \
	fi
{{end}}{{end}}{{end}}

{{if .Components.Backend.API}}.PHONY: security-scan-backend
security-scan-backend: ## Run backend security scan
	@echo "$(CYAN)Scanning backend for vulnerabilities...$(RESET)"
	@cd $(BACKEND_DIR) && go list -json -m all | nancy sleuth{{end}}

##@ Information

.PHONY: status
status: ## Show project status
	@echo "$(CYAN){{.Name}} Project Status$(RESET)"
	@echo "$(YELLOW)Version:$(RESET) $(VERSION)"
	@echo "$(YELLOW)Git Commit:$(RESET) $(GIT_COMMIT)"
	@echo "$(YELLOW)Build Time:$(RESET) $(BUILD_TIME)"
	@echo ""
{{if .Components.Frontend.MainApp}}	@echo "$(YELLOW)Frontend Applications:$(RESET)"
{{range $dir := split .Components.Frontend.MainApp "App Home Admin"}}{{if $dir}}	@if [ -d "{{$dir}}" ]; then \
		echo "  ✅ {{$dir}}"; \
	else \
		echo "  ❌ {{$dir}} (not found)"; \
	fi
{{end}}{{end}}{{end}}
{{if .Components.Backend.API}}	@echo "$(YELLOW)Backend Service:$(RESET)"
	@if [ -d "$(BACKEND_DIR)" ]; then \
		echo "  ✅ $(BACKEND_DIR)"; \
	else \
		echo "  ❌ $(BACKEND_DIR) (not found)"; \
	fi{{end}}
{{if or .Components.Mobile.Android .Components.Mobile.iOS}}	@echo "$(YELLOW)Mobile Applications:$(RESET)"
{{if .Components.Mobile.Android}}	@if [ -d "$(MOBILE_DIR)/Android" ]; then \
		echo "  ✅ Android"; \
	else \
		echo "  ❌ Android (not found)"; \
	fi{{end}}
{{if .Components.Mobile.iOS}}	@if [ -d "$(MOBILE_DIR)/iOS" ]; then \
		echo "  ✅ iOS"; \
	else \
		echo "  ❌ iOS (not found)"; \
	fi{{end}}{{end}}

.PHONY: urls
urls: ## Show development URLs
	@echo "$(CYAN){{.Name}} Development URLs$(RESET)"
{{if .Components.Frontend.MainApp}}	@echo "$(YELLOW)Frontend Applications:$(RESET)"
	@echo "  🌐 Main App: http://localhost:3000"{{end}}
{{if .Components.Frontend.Home}}	@echo "  🏠 Home Page: http://localhost:3001"{{end}}
{{if .Components.Frontend.Admin}}	@echo "  ⚙️  Admin Dashboard: http://localhost:3002"{{end}}
{{if .Components.Backend.API}}	@echo "$(YELLOW)Backend Services:$(RESET)"
	@echo "  🔧 API Server: http://localhost:8080"
	@echo "  📚 API Docs: http://localhost:8080/swagger"
	@echo "  📊 Metrics: http://localhost:8080/metrics"{{end}}

.PHONY: env-info
env-info: ## Show environment information
	@echo "$(CYAN)Environment Information$(RESET)"
	@echo "$(YELLOW)Operating System:$(RESET) $(shell uname -s)"
	@echo "$(YELLOW)Architecture:$(RESET) $(shell uname -m)"
{{if .Components.Frontend.MainApp}}	@echo "$(YELLOW)Node.js:$(RESET) $(shell node --version 2>/dev/null || echo 'Not installed')"
	@echo "$(YELLOW)npm:$(RESET) $(shell npm --version 2>/dev/null || echo 'Not installed')"{{end}}
{{if .Components.Backend.API}}	@echo "$(YELLOW)Go:$(RESET) $(shell go version 2>/dev/null | cut -d' ' -f3 || echo 'Not installed')"{{end}}
{{if .Components.Infrastructure.Docker}}	@echo "$(YELLOW)Docker:$(RESET) $(shell docker --version 2>/dev/null | cut -d' ' -f3 | tr -d ',' || echo 'Not installed')"{{end}}
	@echo "$(YELLOW)Git:$(RESET) $(shell git --version 2>/dev/null | cut -d' ' -f3 || echo 'Not installed')"

##@ Documentation

.PHONY: docs
docs: ## Generate documentation
	@echo "$(BLUE)Generating documentation...$(RESET)"
{{if .Components.Backend.API}}	@cd $(BACKEND_DIR) && swag init{{end}}
	@echo "$(GREEN)✅ Documentation generated$(RESET)"

.PHONY: docs-serve
docs-serve: ## Serve documentation locally
	@echo "$(BLUE)Serving documentation...$(RESET)"
	@cd $(DOCS_DIR) && python3 -m http.server 8000

# Include additional Makefiles if they exist
-include Makefile.local
{{if .Components.Frontend.MainApp}}-include $(FRONTEND_DIRS:%=%/Makefile){{end}}
{{if .Components.Backend.API}}-include $(BACKEND_DIR)/Makefile{{end}}

# Phony targets
.PHONY: all
all: setup test build ## Run setup, test, and build

# Version information
version:
	@echo $(VERSION)