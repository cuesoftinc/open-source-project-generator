version: '3.8'

services:
{{if or .Components.Backend.API .Components.Backend.GoGin}}
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: {{.Name}}-postgres
    environment:
      POSTGRES_DB: {{.Name}}
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./CommonServer/migrations:/docker-entrypoint-initdb.d
    networks:
      - {{.Name}}-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: {{.Name}}-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - {{.Name}}-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  api:
    build:
      context: ./CommonServer
      dockerfile: Dockerfile
    container_name: {{.Name}}-api
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/{{.Name}}?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-jwt-secret-change-in-production
      - GIN_MODE=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - {{.Name}}-network
    volumes:
      - ./CommonServer:/app
    command: ["go", "run", "main.go"]
{{end}}

{{if or .Components.Frontend.MainApp .Components.Frontend.NextJS.App}}
  # Frontend - Main App
  app:
    build:
      context: ./App/main
      dockerfile: Dockerfile
    container_name: {{.Name}}-app
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NODE_ENV=development
    {{if or .Components.Backend.API .Components.Backend.GoGin}}
    depends_on:
      - api
    {{end}}
    networks:
      - {{.Name}}-network
    volumes:
      - ./App/main:/app
      - /app/node_modules
      - /app/.next
{{end}}

{{if or .Components.Frontend.Home .Components.Frontend.NextJS.Home}}
  # Frontend - Home/Landing
  home:
    build:
      context: ./App/home
      dockerfile: Dockerfile
    container_name: {{.Name}}-home
    ports:
      - "3001:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NODE_ENV=development
    {{if or .Components.Backend.API .Components.Backend.GoGin}}
    depends_on:
      - api
    {{end}}
    networks:
      - {{.Name}}-network
    volumes:
      - ./App/home:/app
      - /app/node_modules
      - /app/.next
{{end}}

{{if or .Components.Frontend.Admin .Components.Frontend.NextJS.Admin}}
  # Frontend - Admin Dashboard
  admin:
    build:
      context: ./App/admin
      dockerfile: Dockerfile
    container_name: {{.Name}}-admin
    ports:
      - "3002:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - NODE_ENV=development
    {{if or .Components.Backend.API .Components.Backend.GoGin}}
    depends_on:
      - api
    {{end}}
    networks:
      - {{.Name}}-network
    volumes:
      - ./App/admin:/app
      - /app/node_modules
      - /app/.next
{{end}}

volumes:
{{if or .Components.Backend.API .Components.Backend.GoGin}}
  postgres_data:
    driver: local
  redis_data:
    driver: local
{{end}}

networks:
  {{.Name}}-network:
    driver: bridge