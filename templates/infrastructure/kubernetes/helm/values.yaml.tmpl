# Default values for {{.Name}}
# This is a YAML-formatted file.

# Global configuration
global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

# Application configuration
app:
  name: {{.Name}}
  organization: {{.Organization}}
  description: "{{.Description}}"
  version: "1.0.0"

# Image configuration
image:
  registry: docker.io
  repository: {{.Organization}}/{{.Name}}
  tag: "latest"
  pullPolicy: IfNotPresent
  pullSecrets: []

# Service account
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  fsGroup: 1001

# Pod security context
podSecurityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  capabilities:
    drop:
    - ALL

{{if .Components.Frontend.NextJS.App}}
# Frontend App configuration
frontend:
  app:
    enabled: true
    replicaCount: 2
    image:
      repository: {{.Organization}}/{{.Name}}-app
      tag: "latest"
    service:
      type: ClusterIP
      port: 3000
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
    autoscaling:
      enabled: true
      minReplicas: 2
      maxReplicas: 10
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80
    nodeSelector: {}
    tolerations: []
    affinity: {}
{{end}}

{{if .Components.Frontend.NextJS.Home}}
  home:
    enabled: true
    replicaCount: 1
    image:
      repository: {{.Organization}}/{{.Name}}-home
      tag: "latest"
    service:
      type: ClusterIP
      port: 3000
    resources:
      limits:
        cpu: 250m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 128Mi
    autoscaling:
      enabled: false
    nodeSelector: {}
    tolerations: []
    affinity: {}
{{end}}

{{if .Components.Frontend.NextJS.Admin}}
  admin:
    enabled: true
    replicaCount: 1
    image:
      repository: {{.Organization}}/{{.Name}}-admin
      tag: "latest"
    service:
      type: ClusterIP
      port: 3000
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
    autoscaling:
      enabled: true
      minReplicas: 1
      maxReplicas: 5
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80
    nodeSelector: {}
    tolerations: []
    affinity: {}
{{end}}

{{if .Components.Backend.GoGin}}
# Backend API configuration
backend:
  api:
    enabled: true
    replicaCount: 3
    image:
      repository: {{.Organization}}/{{.Name}}-api
      tag: "latest"
    service:
      type: ClusterIP
      port: 8080
      metricsPort: 9090
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 512Mi
    autoscaling:
      enabled: true
      minReplicas: 3
      maxReplicas: 20
      targetCPUUtilizationPercentage: 70
      targetMemoryUtilizationPercentage: 80
    nodeSelector: {}
    tolerations: []
    affinity: {}
{{end}}

# Database configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "change_this_password_in_production"
    username: "{{.Name}}_user"
    password: "change_this_password_in_production"
    database: "{{.Name}}_production"
  primary:
    persistence:
      enabled: true
      size: 20Gi
      storageClass: "fast-ssd"
    resources:
      limits:
        cpu: 1000m
        memory: 2Gi
      requests:
        cpu: 200m
        memory: 1Gi
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Redis configuration
redis:
  enabled: true
  auth:
    enabled: false
  master:
    persistence:
      enabled: true
      size: 8Gi
      storageClass: "fast-ssd"
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
  metrics:
    enabled: true
    serviceMonitor:
      enabled: true

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
  hosts:
    - host: {{.Name}}.{{.Organization}}.com
      paths:
        - path: /
          pathType: Prefix
          {{if .Components.Frontend.NextJS.App}}service: {{.Name}}-app-service{{end}}
        {{if .Components.Backend.GoGin}}
        - path: /api
          pathType: Prefix
          service: {{.Name}}-api-service
        {{end}}
    {{if .Components.Frontend.NextJS.Home}}
    - host: home.{{.Name}}.{{.Organization}}.com
      paths:
        - path: /
          pathType: Prefix
          service: {{.Name}}-home-service
    {{end}}
    {{if .Components.Frontend.NextJS.Admin}}
    - host: admin.{{.Name}}.{{.Organization}}.com
      paths:
        - path: /
          pathType: Prefix
          service: {{.Name}}-admin-service
        {{if .Components.Backend.GoGin}}
        - path: /api
          pathType: Prefix
          service: {{.Name}}-api-service
        {{end}}
    {{end}}
  tls:
    - secretName: {{.Name}}-tls
      hosts:
        - {{.Name}}.{{.Organization}}.com
        {{if .Components.Frontend.NextJS.Home}}- home.{{.Name}}.{{.Organization}}.com{{end}}
        {{if .Components.Frontend.NextJS.Admin}}- admin.{{.Name}}.{{.Organization}}.com{{end}}

# Certificate Manager
certManager:
  enabled: true
  installCRDs: true

# Monitoring configuration
monitoring:
  prometheus:
    enabled: true
    server:
      persistentVolume:
        enabled: true
        size: 50Gi
        storageClass: "fast-ssd"
      resources:
        limits:
          cpu: 1000m
          memory: 2Gi
        requests:
          cpu: 200m
          memory: 1Gi
    alertmanager:
      enabled: true
      persistentVolume:
        enabled: true
        size: 10Gi
        storageClass: "fast-ssd"
    nodeExporter:
      enabled: true
    kubeStateMetrics:
      enabled: true
    
  grafana:
    enabled: true
    adminPassword: "change_this_password_in_production"
    persistence:
      enabled: true
      size: 10Gi
      storageClass: "fast-ssd"
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 100m
        memory: 256Mi
    dashboardProviders:
      dashboardproviders.yaml:
        apiVersion: 1
        providers:
        - name: 'default'
          orgId: 1
          folder: ''
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/default
    dashboards:
      default:
        kubernetes-cluster:
          gnetId: 7249
          revision: 1
          datasource: Prometheus
        kubernetes-pods:
          gnetId: 6417
          revision: 1
          datasource: Prometheus
        postgresql:
          gnetId: 9628
          revision: 7
          datasource: Prometheus
        redis:
          gnetId: 763
          revision: 4
          datasource: Prometheus

# Network policies
networkPolicy:
  enabled: true
  ingress:
    enabled: true
  egress:
    enabled: true

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Resource quotas
resourceQuota:
  enabled: true
  hard:
    requests.cpu: "4"
    requests.memory: 8Gi
    limits.cpu: "8"
    limits.memory: 16Gi
    persistentvolumeclaims: "10"

# Limit ranges
limitRange:
  enabled: true
  limits:
    - default:
        cpu: 500m
        memory: 512Mi
      defaultRequest:
        cpu: 100m
        memory: 128Mi
      type: Container

# Backup configuration
backup:
  enabled: false
  schedule: "0 2 * * *"
  retention: "30d"
  storage:
    type: "s3"
    bucket: "{{.Name}}-backups"
    region: "us-west-2"

# External secrets
externalSecrets:
  enabled: false
  secretStore:
    provider: "aws"
    region: "us-west-2"

# Chaos engineering
chaosEngineering:
  enabled: false
  litmus:
    enabled: false