#!/bin/bash

# {{.Name}} Backend Test Runner Script

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Default values
TEST_TYPE="all"
COVERAGE=false
VERBOSE=false
RACE=false
PARALLEL=4

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -t|--type)
            TEST_TYPE="$2"
            shift 2
            ;;
        -c|--coverage)
            COVERAGE=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        -r|--race)
            RACE=true
            shift
            ;;
        -p|--parallel)
            PARALLEL="$2"
            shift 2
            ;;
        -h|--help)
            echo "Usage: $0 [OPTIONS]"
            echo "Options:"
            echo "  -t, --type TYPE     Test type: all, unit, integration, benchmark (default: all)"
            echo "  -c, --coverage      Generate coverage report"
            echo "  -v, --verbose       Verbose output"
            echo "  -r, --race          Enable race detection"
            echo "  -p, --parallel N    Number of parallel tests (default: 4)"
            echo "  -h, --help          Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            exit 1
            ;;
    esac
done

echo -e "${BLUE}Running {{.Name}} backend tests...${NC}"

# Set up test environment
export APP_ENV=test
export GO_ENV=test

# Load test environment variables if file exists
if [ -f ".env.test" ]; then
    echo -e "${YELLOW}Loading test environment variables...${NC}"
    export $(grep -v '^#' .env.test | xargs)
fi

# Build test flags
TEST_FLAGS=""
if [ "$VERBOSE" = true ]; then
    TEST_FLAGS="$TEST_FLAGS -v"
fi

if [ "$RACE" = true ]; then
    TEST_FLAGS="$TEST_FLAGS -race"
fi

TEST_FLAGS="$TEST_FLAGS -parallel $PARALLEL"

# Coverage flags
COVERAGE_FLAGS=""
if [ "$COVERAGE" = true ]; then
    COVERAGE_FLAGS="-coverprofile=coverage.out -covermode=atomic"
fi

# Run tests based on type
case $TEST_TYPE in
    "unit")
        echo -e "${YELLOW}Running unit tests...${NC}"
        go test $TEST_FLAGS $COVERAGE_FLAGS -short ./...
        ;;
    "integration")
        echo -e "${YELLOW}Running integration tests...${NC}"
        go test $TEST_FLAGS $COVERAGE_FLAGS -run Integration ./...
        ;;
    "benchmark")
        echo -e "${YELLOW}Running benchmark tests...${NC}"
        go test $TEST_FLAGS -bench=. -benchmem ./...
        ;;
    "all")
        echo -e "${YELLOW}Running all tests...${NC}"
        go test $TEST_FLAGS $COVERAGE_FLAGS ./...
        ;;
    *)
        echo -e "${RED}Invalid test type: $TEST_TYPE${NC}"
        echo "Valid types: all, unit, integration, benchmark"
        exit 1
        ;;
esac

# Generate coverage report if requested
if [ "$COVERAGE" = true ] && [ -f "coverage.out" ]; then
    echo -e "${YELLOW}Generating coverage report...${NC}"
    
    # Generate HTML coverage report
    go tool cover -html=coverage.out -o coverage.html
    
    # Display coverage summary
    COVERAGE_PERCENT=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
    echo -e "${GREEN}Total coverage: $COVERAGE_PERCENT${NC}"
    
    # Check coverage threshold (80%)
    COVERAGE_NUM=$(echo $COVERAGE_PERCENT | sed 's/%//')
    if (( $(echo "$COVERAGE_NUM >= 80" | bc -l) )); then
        echo -e "${GREEN}Coverage meets threshold (80%)${NC}"
    else
        echo -e "${YELLOW}Coverage below threshold (80%): $COVERAGE_PERCENT${NC}"
    fi
    
    echo -e "${BLUE}Coverage report generated: coverage.html${NC}"
fi

# Check for test failures
if [ $? -eq 0 ]; then
    echo -e "${GREEN}All tests passed!${NC}"
else
    echo -e "${RED}Some tests failed${NC}"
    exit 1
fi

# Clean up temporary files
if [ -f "coverage.out" ] && [ "$COVERAGE" = false ]; then
    rm -f coverage.out
fi

echo -e "${GREEN}Test run completed successfully${NC}"