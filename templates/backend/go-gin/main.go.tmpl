package main

import (
	"log"
	"os"

	"{{.Name}}/internal/config"
	"{{.Name}}/internal/database"
	"{{.Name}}/internal/redis"
	"{{.Name}}/internal/router"
	"{{.Name}}/internal/server"
)

// @title {{.Name}} API
// @version 1.0
// @description {{.Description}}
// @termsOfService http://swagger.io/terms/

// @contact.name {{.Organization}}
// @contact.url http://{{.Name}}.com/support
// @contact.email support@{{.Name}}.com

// @license.name {{.License}}
// @license.url https://opensource.org/licenses/{{.License}}

// @host localhost:8080
// @BasePath /api/v1

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Type "Bearer" followed by a space and JWT token.

func main() {
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		log.Fatal("Failed to load configuration:", err)
	}

	// Initialize database
	db, err := database.Initialize(cfg.Database)
	if err != nil {
		log.Fatal("Failed to initialize database:", err)
	}

	// Initialize Redis
	rdb, err := redis.Initialize(cfg.Redis)
	if err != nil {
		log.Fatal("Failed to initialize Redis:", err)
	}

	// Initialize router
	r := router.Initialize(db, rdb, cfg)

	// Initialize and start server
	srv := server.New(r, cfg.Server)
	
	log.Printf("Starting server on port %s", cfg.Server.Port)
	if err := srv.Start(); err != nil {
		log.Fatal("Failed to start server:", err)
	}
}