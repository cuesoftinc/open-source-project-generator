package services

import (
	"errors"
	"testing"

	"{{.Name}}/internal/models"
	"{{.Name}}/internal/repositories/mocks"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

func TestAuthService_Register(t *testing.T) {
	userRepo := new(mocks.UserRepository)
	authService := NewAuthService(userRepo)

	t.Run("successful registration", func(t *testing.T) {
		registerReq := &models.RegisterRequest{
			Email:     "test@example.com",
			Username:  "testuser",
			FirstName: "Test",
			LastName:  "User",
			Password:  "password123",
		}

		userRepo.On("GetByEmail", registerReq.Email).Return(nil, errors.New("user not found")).Once()
		userRepo.On("GetByUsername", registerReq.Username).Return(nil, errors.New("user not found")).Once()
		userRepo.On("Create", mock.AnythingOfType("*models.User")).Return(nil).Once()

		response, err := authService.Register(registerReq)
		assert.NoError(t, err)
		assert.NotNil(t, response)
		assert.NotEmpty(t, response.Token)
		assert.Equal(t, registerReq.Email, response.User.Email)

		userRepo.AssertExpectations(t)
	})

	t.Run("registration with existing email", func(t *testing.T) {
		registerReq := &models.RegisterRequest{
			Email:     "existing@example.com",
			Username:  "testuser",
			FirstName: "Test",
			LastName:  "User",
			Password:  "password123",
		}

		existingUser := &models.User{ID: 1, Email: "existing@example.com"}
		userRepo.On("GetByEmail", registerReq.Email).Return(existingUser, nil).Once()

		response, err := authService.Register(registerReq)
		assert.Error(t, err)
		assert.Nil(t, response)
		assert.Contains(t, err.Error(), "email already exists")

		userRepo.AssertExpectations(t)
	})

	t.Run("registration with existing username", func(t *testing.T) {
		registerReq := &models.RegisterRequest{
			Email:     "test@example.com",
			Username:  "existinguser",
			FirstName: "Test",
			LastName:  "User",
			Password:  "password123",
		}

		existingUser := &models.User{ID: 1, Username: "existinguser"}
		userRepo.On("GetByEmail", registerReq.Email).Return(nil, errors.New("user not found")).Once()
		userRepo.On("GetByUsername", registerReq.Username).Return(existingUser, nil).Once()

		response, err := authService.Register(registerReq)
		assert.Error(t, err)
		assert.Nil(t, response)
		assert.Contains(t, err.Error(), "username already exists")

		userRepo.AssertExpectations(t)
	})
}

func TestAuthService_Login(t *testing.T) {
	userRepo := new(mocks.UserRepository)
	authService := NewAuthService(userRepo)

	t.Run("successful login", func(t *testing.T) {
		loginReq := &models.LoginRequest{
			Email:    "test@example.com",
			Password: "password123",
		}

		// Create a user with hashed password
		user := &models.User{
			ID:        1,
			Email:     "test@example.com",
			Username:  "testuser",
			FirstName: "Test",
			LastName:  "User",
			Password:  "hashedpassword",
			IsActive:  true,
		}
		// Hash the password for testing
		user.Password = "password123"
		user.HashPassword()

		userRepo.On("GetByEmail", loginReq.Email).Return(user, nil).Once()

		response, err := authService.Login(loginReq)
		assert.NoError(t, err)
		assert.NotNil(t, response)
		assert.NotEmpty(t, response.Token)
		assert.Equal(t, user.Email, response.User.Email)

		userRepo.AssertExpectations(t)
	})

	t.Run("login with non-existent user", func(t *testing.T) {
		loginReq := &models.LoginRequest{
			Email:    "nonexistent@example.com",
			Password: "password123",
		}

		userRepo.On("GetByEmail", loginReq.Email).Return(nil, errors.New("user not found")).Once()

		response, err := authService.Login(loginReq)
		assert.Error(t, err)
		assert.Nil(t, response)
		assert.Contains(t, err.Error(), "invalid credentials")

		userRepo.AssertExpectations(t)
	})

	t.Run("login with incorrect password", func(t *testing.T) {
		loginReq := &models.LoginRequest{
			Email:    "test@example.com",
			Password: "wrongpassword",
		}

		user := &models.User{
			ID:        1,
			Email:     "test@example.com",
			Username:  "testuser",
			Password:  "correctpassword",
			IsActive:  true,
		}
		user.HashPassword()

		userRepo.On("GetByEmail", loginReq.Email).Return(user, nil).Once()

		response, err := authService.Login(loginReq)
		assert.Error(t, err)
		assert.Nil(t, response)
		assert.Contains(t, err.Error(), "invalid credentials")

		userRepo.AssertExpectations(t)
	})

	t.Run("login with inactive user", func(t *testing.T) {
		loginReq := &models.LoginRequest{
			Email:    "test@example.com",
			Password: "password123",
		}

		user := &models.User{
			ID:        1,
			Email:     "test@example.com",
			Username:  "testuser",
			Password:  "password123",
			IsActive:  false,
		}
		user.HashPassword()

		userRepo.On("GetByEmail", loginReq.Email).Return(user, nil).Once()

		response, err := authService.Login(loginReq)
		assert.Error(t, err)
		assert.Nil(t, response)
		assert.Contains(t, err.Error(), "account is inactive")

		userRepo.AssertExpectations(t)
	})
}

func TestAuthService_ValidateToken(t *testing.T) {
	userRepo := new(mocks.UserRepository)
	authService := NewAuthService(userRepo)

	t.Run("valid token", func(t *testing.T) {
		user := &models.User{
			ID:        1,
			Email:     "test@example.com",
			Username:  "testuser",
			IsActive:  true,
		}

		// Generate a valid token
		token, err := generateToken(user.ID, user.Email)
		assert.NoError(t, err)

		userRepo.On("GetByID", user.ID).Return(user, nil).Once()

		validatedUser, err := authService.ValidateToken(token)
		assert.NoError(t, err)
		assert.NotNil(t, validatedUser)
		assert.Equal(t, user.ID, validatedUser.ID)

		userRepo.AssertExpectations(t)
	})

	t.Run("invalid token", func(t *testing.T) {
		invalidToken := "invalid.token.here"

		validatedUser, err := authService.ValidateToken(invalidToken)
		assert.Error(t, err)
		assert.Nil(t, validatedUser)
	})

	t.Run("valid token but user not found", func(t *testing.T) {
		// Generate a token for a non-existent user
		token, err := generateToken(999, "nonexistent@example.com")
		assert.NoError(t, err)

		userRepo.On("GetByID", uint(999)).Return(nil, errors.New("user not found")).Once()

		validatedUser, err := authService.ValidateToken(token)
		assert.Error(t, err)
		assert.Nil(t, validatedUser)

		userRepo.AssertExpectations(t)
	})
}