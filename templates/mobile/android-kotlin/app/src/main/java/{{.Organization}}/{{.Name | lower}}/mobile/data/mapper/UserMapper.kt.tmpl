package {{.Organization}}.{{.Name | lower}}.mobile.data.mapper

import javax.inject.Inject
import {{.Organization}}.{{.Name | lower}}.mobile.domain.model.User
import {{.Organization}}.{{.Name | lower}}.mobile.domain.model.LoginCredentials
import {{.Organization}}.{{.Name | lower}}.mobile.domain.model.AuthToken
import {{.Organization}}.{{.Name | lower}}.mobile.data.remote.dto.UserDto
import {{.Organization}}.{{.Name | lower}}.mobile.data.remote.dto.LoginRequest
import {{.Organization}}.{{.Name | lower}}.mobile.data.remote.dto.LoginResponse
import {{.Organization}}.{{.Name | lower}}.mobile.data.local.entity.UserEntity
import java.text.SimpleDateFormat
import java.util.*

class UserMapper @Inject constructor() {
    
    private val dateFormat = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault())
    
    fun toUser(dto: UserDto): User {
        return User(
            id = dto.id,
            email = dto.email,
            name = dto.name,
            avatarUrl = dto.avatarUrl,
            createdAt = parseDate(dto.createdAt),
            updatedAt = parseDate(dto.updatedAt)
        )
    }
    
    fun toUser(entity: UserEntity): User {
        return User(
            id = entity.id,
            email = entity.email,
            name = entity.name,
            avatarUrl = entity.avatarUrl,
            createdAt = entity.createdAt,
            updatedAt = entity.updatedAt
        )
    }
    
    fun toUserDto(user: User): UserDto {
        return UserDto(
            id = user.id,
            email = user.email,
            name = user.name,
            avatarUrl = user.avatarUrl,
            createdAt = formatDate(user.createdAt),
            updatedAt = formatDate(user.updatedAt)
        )
    }
    
    fun toUserEntity(user: User): UserEntity {
        return UserEntity(
            id = user.id,
            email = user.email,
            name = user.name,
            avatarUrl = user.avatarUrl,
            createdAt = user.createdAt,
            updatedAt = user.updatedAt
        )
    }   
 
    fun toLoginRequest(credentials: LoginCredentials): LoginRequest {
        return LoginRequest(
            email = credentials.email,
            password = credentials.password
        )
    }
    
    fun toAuthToken(response: LoginResponse): AuthToken {
        return AuthToken(
            token = response.token,
            user = toUser(response.user)
        )
    }
    
    private fun parseDate(dateString: String): Long {
        return try {
            dateFormat.parse(dateString)?.time ?: System.currentTimeMillis()
        } catch (e: Exception) {
            System.currentTimeMillis()
        }
    }
    
    private fun formatDate(timestamp: Long): String {
        return dateFormat.format(Date(timestamp))
    }
}