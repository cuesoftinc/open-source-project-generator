package {{.Organization}}.{{.Name | lower}}.mobile.presentation.users

import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.ExperimentalCoroutinesApi
import kotlinx.coroutines.flow.flowOf
import kotlinx.coroutines.test.*
import org.junit.After
import org.junit.Before
import org.junit.Test
import org.mockito.Mock
import org.mockito.MockitoAnnotations
import org.mockito.kotlin.whenever
import {{.Organization}}.{{.Name | lower}}.mobile.domain.usecase.GetUsersUseCase
import {{.Organization}}.{{.Name | lower}}.mobile.domain.model.User
import {{.Organization}}.{{.Name | lower}}.mobile.core.util.Resource
import kotlin.test.assertEquals
import kotlin.test.assertFalse
import kotlin.test.assertTrue

@OptIn(ExperimentalCoroutinesApi::class)
class UsersViewModelTest {
    
    @Mock
    private lateinit var getUsersUseCase: GetUsersUseCase
    
    private lateinit var viewModel: UsersViewModel
    private val testDispatcher = UnconfinedTestDispatcher()
    
    @Before
    fun setUp() {
        MockitoAnnotations.openMocks(this)
        Dispatchers.setMain(testDispatcher)
    }
    
    @After
    fun tearDown() {
        Dispatchers.resetMain()
    }
    
    @Test
    fun `init should load users successfully`() = runTest {
        // Given
        val users = listOf(
            User("1", "test@example.com", "Test User", null, 0L, 0L)
        )
        whenever(getUsersUseCase()).thenReturn(
            flowOf(Resource.Success(users))
        )
        
        // When
        viewModel = UsersViewModel(getUsersUseCase)
        
        // Then
        val uiState = viewModel.uiState.value
        assertEquals(users, uiState.users)
        assertFalse(uiState.isLoading)
        assertEquals(null, uiState.error)
    }
    
    @Test
    fun `init should handle error`() = runTest {
        // Given
        val errorMessage = "Network error"
        whenever(getUsersUseCase()).thenReturn(
            flowOf(Resource.Error(errorMessage))
        )
        
        // When
        viewModel = UsersViewModel(getUsersUseCase)
        
        // Then
        val uiState = viewModel.uiState.value
        assertTrue(uiState.users.isEmpty())
        assertFalse(uiState.isLoading)
        assertEquals(errorMessage, uiState.error)
    }
}